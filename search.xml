<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于算法竞赛</title>
    <url>/2023/10/18/%E5%85%B3%E4%BA%8E%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='orange'>关于算法竞赛</font>
</div>



<h3 id="1-关于我们算法协会"><a href="#1-关于我们算法协会" class="headerlink" title="1. 关于我们算法协会"></a>1. 关于我们算法协会</h3><p>社团的面向就是算法编程竞赛 </p>
<p>比如：蓝桥杯，ccpc河北省赛（河北省程序设计大赛）</p>
<p><a href="https://dasai.lanqiao.cn/">蓝桥杯官网</a></p>
<h3 id="2-算法竞赛介绍"><a href="#2-算法竞赛介绍" class="headerlink" title="2. 算法竞赛介绍"></a>2. 算法竞赛介绍</h3><h5 id="1-优势"><a href="#1-优势" class="headerlink" title="1. 优势"></a>1. 优势</h5><ul>
<li><p>我认为对算法算是学习计算机基础，一方面能锻炼你的编程思维和逻辑思维能力，另一方面是提高自主学习的能力。未来要走的更远，往往是基础的能力来决定的。</p>
</li>
<li><p>如果你要考研，在复试中可能面临机试（上机做题），学过算法可以更有底气。 拿过奖项也能更好展现自己的实力。</p>
</li>
<li><p>而如果你选择直接就业的话，也能丰富你的简历，向hr展示自己的能力。</p>
<p>尤其在大厂的面试中，很多时候都会涉及到算法题。</p>
</li>
</ul>
<h5 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h5><ul>
<li><p>算法竞赛跟互联网+以及挑战杯等竞赛不一样，基本要靠自己去努力。</p>
</li>
<li><p>并且算法具有一定的难度，想要拿到很高的奖项，需要付出很大的努力，最重要是对算法有一定的兴趣。有前进的动力才能长久坚持下去。</p>
</li>
</ul>
<h5 id="题目的介绍"><a href="#题目的介绍" class="headerlink" title="题目的介绍"></a>题目的介绍</h5><p><img src="https://picss.sunbangyan.cn/2023/10/18/ba92eda27cc49d8ceccef650874bd378.png" alt=""></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="1-蓝桥杯"><a href="#1-蓝桥杯" class="headerlink" title="1. 蓝桥杯"></a>1. 蓝桥杯</h5><p>蓝桥杯的赛制是oi赛制</p>
<p>分为省赛和国赛（省一可参加国赛）</p>
<h5 id="2-ccpc河北省赛"><a href="#2-ccpc河北省赛" class="headerlink" title="2. ccpc河北省赛"></a>2. ccpc河北省赛</h5><p>ccpc采用ACM赛制</p>
<p>与蓝桥杯单人参赛不同，ccpc是三人一组去参加比赛</p>
<h3 id="3-算法的学习的方法等"><a href="#3-算法的学习的方法等" class="headerlink" title="3. 算法的学习的方法等"></a>3. 算法的学习的方法等</h3><h5 id="开始是掌握c-的语法知识，与c语言的语法知识相似。c-的很多东西在写题时会很实用。"><a href="#开始是掌握c-的语法知识，与c语言的语法知识相似。c-的很多东西在写题时会很实用。" class="headerlink" title="开始是掌握c++的语法知识，与c语言的语法知识相似。c++的很多东西在写题时会很实用。"></a>开始是掌握c++的语法知识，与c语言的语法知识相似。c++的很多东西在写题时会很实用。</h5><h5 id="之后就可以开始刷题了。"><a href="#之后就可以开始刷题了。" class="headerlink" title="之后就可以开始刷题了。"></a>之后就可以开始刷题了。</h5><h5 id="刷题网站："><a href="#刷题网站：" class="headerlink" title="刷题网站："></a>刷题网站：</h5><ul>
<li><p><a href="https://ac.nowcoder.com/">牛客oj</a></p>
</li>
<li><p><a href="https://www.acwing.com/about/">acwing</a></p>
</li>
<li><p><a href="https://atcoder.jp/">atcoder</a></p>
</li>
<li><p><a href="https://codeforces.com/">codeforces</a></p>
</li>
</ul>
<h3 id="4-其他想说的话"><a href="#4-其他想说的话" class="headerlink" title="4. 其他想说的话"></a>4. 其他想说的话</h3><p>如果你对算法竞赛感兴趣的话，在11月底或者12月初就是蓝桥杯的校赛， 也是你们参加的第一次比赛。蓝桥杯和ccpc的比赛都会在你们大一下举行，所以你们还有充足的时间去做准备。</p>
]]></content>
      <categories>
        <category>水</category>
      </categories>
      <tags>
        <tag>水</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客小白月赛79</title>
    <url>/2023/10/21/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B79/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>牛客小白月赛79</font>
</div>

<p><a href="https://ac.nowcoder.com/acm/contest/66877#question">牛客小白月赛79</a></p>
<div align='center'>
    <font size='6'>A 数位dp？</font>
</div>
### A

#### 题意

问最少需要多少次操作，可以把数字n变成干净的数

#### 解题思路

从定义下手，干净的数满足下面两个条件之一

1. 是偶数，且不含前导0 (例如000023，23前面的0就叫做前导0)
2. 数字为空，也就是所有数位被删除

一个数字的奇偶性，取决于个位数的奇偶，所以我们从数的最后一位开始枚举。

每次判断是否为偶数，如果不是就删除最后一位。这样最多将数字删空，而不会出现前导0

#### c ++ 代码

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>

    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> 
        <span class="token punctuation">&#123;</span>
            n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cnt <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

#### c代码

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> 
        <span class="token punctuation">&#123;</span>
            n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cnt <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div align='center'>
    <font size='6'>B 灵异背包？</font>
</div>

<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>n个正整数，可以将一些数放入背包，需要使得背包中的数的总和为偶数且为最大值。</p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>我们可以将所有的数放入背包，如果此时总和为偶数，那么这就是满足条件的数。</p>
<p>如果此时总和为奇数，那么我们只需要把最小的一个奇数拿出去，那么总数就变成了偶数，也就是满足条件的最大值。</p>
<h4 id="c-代码"><a href="#c-代码" class="headerlink" title="c++代码"></a>c++代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// sort排序函数，默认从小到达排序</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// 总和为偶数，直接跳出循环</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 总和为奇数，找到最小的奇数</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            sum <span class="token operator">-=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="c代码"><a href="#c代码" class="headerlink" title="c代码"></a>c代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// sum为总和</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//如果为奇数，就去掉最小的那个奇数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> mi <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> mi <span class="token operator">=</span> mi <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> mi <span class="token operator">:</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        sum <span class="token operator">-=</span> mi<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <font size='6'>C mex和gcd的乘积</font>
</div>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>​    题意就是求$mex(a_1,…a_r) * gcd(a_1…a_r)$的最大值<br>​    其中$a_1…a_r$可以是任意连续区间<br>​    gcd就是求最大公约数，而mex求的是区间中未出现的最小非负整数<br>​    例如 mex(0,2,3)=1</p>
<h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>​    我们其实可以发现，如果区间里没有0的话，那么mex()的值为0，就一定不是最大值了。</p>
<p>​    所以我们需要从包含0的区间入手。</p>
<p>​    而这又分为两种情况，包含1，和不包含1</p>
<ol>
<li><p>当区间不包含1时，mex()的值就一定是1，此时就需要保证gcd()的值最大</p>
</li>
<li><p>当区间包含1时，gcd()的值就一定是1，此时就需要保证mex()的值最大</p>
</li>
</ol>
<p>​    综上所述，我们需要找到包含0的区间内，gcd()的最大值，和mex()的最大值</p>
<ol>
<li><p>当我们以0为起始点，向左或向右走一步，此时gcd()就是最大值。因为加入更多的数后，最大公约数，只会不变或减小，而不可能增加。</p>
</li>
<li><p>而mex()的最大值就是包含所有n个数。因为mex()求的是最小的没有出现过的正整数，包含的数越多，mex()的值只会不变或增加，而不会减小。</p>
</li>
</ol>
<p>需要注意的是，当所有数都为0的时候，要进行特判。</p>
<h4 id="c-代码-1"><a href="#c-代码-1" class="headerlink" title="c++代码"></a>c++代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存储每个数出现的次数</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 

    <span class="token comment">// 当所有数都为0，直接输出0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// mex()的最大值</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">)</span> res <span class="token operator">++</span> <span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// 防止越界，需要特判i的值</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="c代码-1"><a href="#c代码-1" class="headerlink" title="c代码"></a>c代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存储每个数出现的次数</span>

<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>  

    <span class="token comment">// 当所有数都为0，直接输出0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">)</span> res <span class="token operator">++</span> <span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// 防止越界，需要特判i的值</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <font size='6'>D 2^20</font>
</div>

<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>有t波丧尸，有两种武器，一种发射一枚子弹，另一种向所有的僵尸发射一枚子弹。</p>
<p>而丧尸被击中后不会死掉，且会复制一个新的丧尸，当丧尸数量是 $2^{20}$的倍数的时候，丧尸可以被消灭。</p>
<h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先子弹数量非常充足，一定可以消灭丧尸(一个个的加也可以到$2^{20}$)</p>
<p>对于$2^{20}$，我们可以转化为2进制来看，1000……，丧尸的数量同理也转化为2进制，如10111</p>
<p>要成为1000……这种数字的倍数，需要保证自身二进制下的最后一个1在1000…..中1的位置或靠左的位置，如1000，那么101000就是他的倍数</p>
<p>问题也就转化为了将n的二进制表示下最后一个1移动到$2^{20}$的二进制下1的位置或靠左的位置。</p>
<p>武器一每次会让丧尸的数量增加1，武器二每次会让丧尸的数量$*$2，也就是在二进制下的数左移一位(即在末尾加一个0)</p>
<p>所以最多需要射击的次数是20，也就是每次都使用武器二的情况。</p>
<p>所以只需要枚举20次，每次多使用一次武器一，取最少的次数即可。</p>
<h4 id="c-代码-2"><a href="#c-代码-2" class="headerlink" title="c ++代码"></a>c ++代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>

        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">22</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> m <span class="token operator">=</span> n<span class="token punctuation">;</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">//cnt为n的最右边的1的位置</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                m <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                cnt <span class="token operator">++</span> <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">-</span> cnt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            n <span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="c代码-2"><a href="#c代码-2" class="headerlink" title="c代码"></a>c代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">22</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> m <span class="token operator">=</span> n<span class="token punctuation">;</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">//cnt为n的最右边的1的位置</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                m <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                cnt <span class="token operator">++</span> <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">-</span> cnt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            n <span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <font size='6'>E 重生之我是QQ邮箱</font>
</div>

<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>一个密码，长度不定，只有6种字符，只要密码后缀是@qq.com这7个字符，就算输入成功。</p>
<p>每一秒随机输入一位，输入错误就重新输入，直到正确。现在需要求出期望时间的个位数。</p>
<p>然后还有一个道具每使用一次可以是期望时间x变为$x^2$。</p>
<h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>一种特殊情况就是，密码长度小于7，那么永远都无法输入正确，时间也就趋于正无穷，输出-1.</p>
<p>每次输入正确的概率是$\frac{1}{6^7}$，期望概率P=$6^7$，那么期望时间就是np=$n*{6^7}$</p>
<p>${np^2}^{m}$(就是np的2次方的m次方)</p>
<p>这道题的核心是个位的变化，下面是个位的数字在平方之后的变化，不难看出，在平方两次之后，个位的数字是不再变化了的，所以我们不用去真正的循环m次，最多只需要循环两次，就可以算出期望数的个位。而且m的范围是1e9，直接枚举是铁定超时的。</p>
<p><img src="https://picss.sunbangyan.cn/2023/10/21/e04342bb9f2380d5fe7a3f3bba1cc0fa.png" alt=""></p>
<h4 id="c-代码-3"><a href="#c-代码-3" class="headerlink" title="c++代码"></a>c++代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>

    <span class="token comment">// 如果n&lt;7，无法解开</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span> 

    <span class="token comment">// 我把6^7给省略了，因为实际上只用得到他各位的6，n同样也只用到个位数</span>
    n <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// 原始期望时间</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">// 使用道具之后</span>
    m <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> res <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="c代码-3"><a href="#c代码-3" class="headerlink" title="c代码"></a>c代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果n&lt;7，无法解开</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span> 

    <span class="token comment">// 我把6^7给省略了，因为实际上只用得到他各位的6，n同样也只用到个位数</span>
    n <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// 原始期望时间</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">// 使用道具之后</span>
    m <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> res <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>小白月赛</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客小白月赛80</title>
    <url>/2023/10/28/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B80/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">牛客小白月赛80</span>
</div>



<p><a href="https://ac.nowcoder.com/acm/contest/67730#question">牛客小白月赛80</a></p>
<div align='center'>
    <span style="font-size:30px">A 矩阵快速幂签到</span>
</div>


<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>一个抽象题(❌)</p>
<p>就跟提示的一样，写几项就看出来了。$a_i$ = i + 1</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>

ll n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
<span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//int t; cin >> t; while (t -- )</span>
    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">B 第一次放学</span>
</div>


<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>n名学生，属于m个班级，放学后，有k名同学冲出了学校，但不知道冲出学校的同学的所在班级。</p>
<p>要求还未出校的学生中，最多有多少学生属于同一个班级。</p>
<h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先假设放学前，人数最多的班级为p班级。那么结果分两种情况：</p>
<ol>
<li>除去p班级，剩下的班级总人数不小于k，那么p班级的人数就是答案</li>
<li>除去p班级，剩下的班级总人数小于k，那么p班级就要减去还需要冲出的人数</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> k<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>
        x <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> k<span class="token punctuation">;</span>
    <span class="token keyword">else</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> b<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> k<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> b<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>    

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//int t; cin >> t; while (t -- )</span>
    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align=center>
    <span style="font-size:30px">C 又放学辣（简单）</span>
</div>


<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>依旧是有n名同学，属于m个班级。放学后，有k名同学冲出学校。不同的是，现在有一个班在拖堂。</p>
<p>需要求出在剩下没有拖堂的班级中，还留在学校的人数最多的班级的最少可能人数</p>
<h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>设t为最多班级的最小可能人数。t的取值范围就是0 ~ n    </p>
<p>设 j 为拖堂的班级，数组c[i]表示 i 班的人数 也就是需要保证$\sum_{i=1}^m{(c_i - t)}$ (i != j) &lt; k</p>
<p>从小到大枚举t，知道找到最小的合适的 t 的值，就是 t 应取的值</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//a存第i个同学在哪个班级，b存第i个班级有多少人</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
<span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//满足条件：除去拖堂的班级，剩下的班级人数大于k</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> k <span class="token operator">+</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span>
            <span class="token comment">//枚举t的所有可能取值，t就是所求的“留在学校的人数最多的班级的最少的可能人数”</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> t <span class="token operator">++</span> <span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    sum <span class="token operator">+=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token comment">//如果冲出学校的同学小于k，则满足条件；从小到大枚举，直到找到最大的值，就是所求t的值</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//不满足条件，输出-1</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//int t; cin >> t; while (t -- )</span>
    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">D 又放学辣（进阶）</span>
</div>


<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>题意与C相同，只增大了取值范围</p>
<h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>N 和 M 的取值在$10^6$以内，而C的做法时间复杂度为O($n^3$)。我们在C题的基础上进行优化。</p>
<p>用两次前缀和来预处理出 t 的所有值，这样 t 的查询的时间复杂度就降到了O(1)</p>
<p>我们希望ge[t] = $\sum_{i=1}^m{(c_i - t)}$。</p>
<p>ge[i] 的 最初含义是从 i+1 减到 i 会 多减去多少</p>
<ul>
<li>比如有两个班级人数是5，那么从5到4，那么之后每一步就需要在原基础上多减2</li>
</ul>
<p>第一次取前缀和后：ge[i] 的含义变为从 i+1 减到 i 会减去多少</p>
<p>第二次取前缀和后：ge[i] 的含义变为减到 i 总共需要减去多少</p>
<p>之后在二分找到符合条件的 t 的值即可。</p>
<ul>
<li>二分时，需要去掉那个拖堂的班级 sum -= max(0ll, c[j] - mid);</li>
</ul>
<p><img src="D:\cun\blog\hexoblog\source\_posts\page_image\屏幕截图 2023-10-28 111658.png" alt=""></p>
<ul>
<li>附上一张图，便于今后回忆</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
ll c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ge<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//ge[i] 的意思是 从 i + 1 减到 i 会多减多少</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
<span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> x<span class="token punctuation">;</span>
        c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> ge<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>   
    <span class="token comment">//ge[i]的意思是 从 i + 1 减到 i 会 减去多少</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> ge<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> ge<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//ge[i]的意思是 减到 i 总共需要减多少     </span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> ge<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> ge<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> k<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
                ll sum <span class="token operator">=</span> ge<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
                sum <span class="token operator">-=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0ll</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>    
            cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> 
        <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>        
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//int t; cin >> t; while (t -- )</span>
    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">E 一种因子游戏</span>
</div>


<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>Alice 和 Bob 打牌，他们各有n张牌。Alice先打出，Bob再打出。</p>
<p>如果Bob打出的牌与Alice的打出的牌不互质（最大公约数为1），则Alice获胜；都没有牌了，则Bob获胜。</p>
<h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>N的取值范围是500以内。所以可以接受O($n^3$)的时间复杂度。</p>
<p>所以可以用匈牙利算法来求二分图的最大匹配。（虽然做的时候并没有想到111）</p>
<p>只有最大匹配数为 n 时，Bob才会获胜。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">500</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> N <span class="token operator">*</span> N<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> h<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span>
<span class="token keyword">int</span> match<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>
        a <span class="token operator">=</span> b<span class="token punctuation">;</span>
        b <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

bool <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> false<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">find</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                match<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
                <span class="token keyword">return</span> true<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
<span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cin <span class="token operator">>></span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> false<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> cnt <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bob"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Alice"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//int t; cin >> t; while (t -- )</span>
    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>小白月赛</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch入门</title>
    <url>/2023/11/04/pytorch%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">pytorch入门_1</span>
</div>

<h2 id="1-读取数据"><a href="#1-读取数据" class="headerlink" title="1. 读取数据"></a>1. 读取数据</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">import</span> os


<span class="token keyword">class</span> <span class="token class-name">MyData</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root_dir<span class="token punctuation">,</span> label_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 初始化数据集的根目录和标签目录</span>
        self<span class="token punctuation">.</span>root_dir <span class="token operator">=</span> root_dir
        self<span class="token punctuation">.</span>label_dir <span class="token operator">=</span> label_dir
        self<span class="token punctuation">.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> label_dir<span class="token punctuation">)</span>
        <span class="token comment"># 获取标签目录下的所有图像文件路径</span>
        self<span class="token punctuation">.</span>img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 根据索引获取图像文件名和路径</span>
        img_name <span class="token operator">=</span> self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>
        img_item_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span> self<span class="token punctuation">.</span>label_dir<span class="token punctuation">,</span> img_name<span class="token punctuation">)</span>
        <span class="token comment"># 打开图像文件并转换为PIL Image对象</span>
        img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_item_path<span class="token punctuation">)</span>
        <span class="token comment"># 设置标签为目录名</span>
        label <span class="token operator">=</span> self<span class="token punctuation">.</span>label_dir
        <span class="token keyword">return</span> img<span class="token punctuation">,</span> label

    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 返回数据集的长度，即图像文件的数量</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">)</span>


root_dir <span class="token operator">=</span> <span class="token string">"hymenoptera_data/train"</span>
<span class="token comment"># 定义蚂蚁图像的标签目录</span>
ants_label_dir <span class="token operator">=</span> <span class="token string">"ants_image"</span>
<span class="token comment"># 创建蚂蚁图像数据集对象</span>
ants_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> ants_label_dir<span class="token punctuation">)</span>
<span class="token comment"># 定义蜜蜂图像的标签目录</span>
bees_label_dir <span class="token operator">=</span> <span class="token string">"bees_image"</span>
<span class="token comment"># 创建蜜蜂图像数据集对象</span>
bees_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> bees_label_dir<span class="token punctuation">)</span>

<span class="token comment"># 将蜜蜂和蚂蚁数据集合并成一个训练数据集</span>
train_dataset <span class="token operator">=</span> bees_dataset <span class="token operator">+</span> ants_dataset

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-批量生成标签文件"><a href="#2-批量生成标签文件" class="headerlink" title="2. 批量生成标签文件"></a>2. 批量生成标签文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os

root_dir <span class="token operator">=</span> <span class="token string">"hymenoptera_data/train"</span>
target_dir <span class="token operator">=</span> <span class="token string">"ants_image"</span>
img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> target_dir<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#img_path = os.listdir("hymenoptera_data/train/ants_image")</span>
label <span class="token operator">=</span> target_dir<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
out_dir <span class="token operator">=</span> <span class="token string">"ants_label"</span>

<span class="token comment"># 针对每个图像文件进行遍历</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> img_path<span class="token punctuation">:</span>
    <span class="token comment"># 从文件名中提取出不带扩展名的部分</span>
    file_name <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token comment"># 创建目标文件路径，文件名与图像文件相同，扩展名为 .txt</span>
    target_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> out_dir<span class="token punctuation">,</span> <span class="token string">"&#123;&#125;.txt"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># 打开文件并写入标签</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>target_file<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>label<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-常见的-Transforms"><a href="#3-常见的-Transforms" class="headerlink" title="3. 常见的 Transforms"></a>3. 常见的 Transforms</h2><ul>
<li>输入    PIL               Image.open()</li>
<li>输出    tensor          Totensor()</li>
<li>作用    warrays        cv.imread()</li>
</ul>
<h2 id="4-卷积操作"><a href="#4-卷积操作" class="headerlink" title="4. 卷积操作"></a>4. 卷积操作</h2><p><img src="C:\Users\31025\Pictures\Screenshots\屏幕截图 2023-11-01 222043.png" alt=""></p>
<p><img src="C:\Users\31025\Pictures\Screenshots\屏幕截图 2023-11-01 222056.png" alt=""></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F

<span class="token comment"># 输入图像</span>
<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                      <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                      <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                      <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 卷积核</span>
kernel <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
kernel <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>kernel<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

output <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>

output <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>

output <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-卷积层"><a href="#5-卷积层" class="headerlink" title="5. 卷积层"></a>5. 卷积层</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"../data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Tudui</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Tudui<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

tudui <span class="token operator">=</span> Tudui<span class="token punctuation">(</span><span class="token punctuation">)</span>

writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"../logs"</span><span class="token punctuation">)</span>

step <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data
    output <span class="token operator">=</span> tudui<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token comment">#torch.Size([64, 3, 32, 32])</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> imgs<span class="token punctuation">,</span> step<span class="token punctuation">)</span>
    <span class="token comment">#torch.Size([64, 6, 30, 30])</span>

    output <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> step<span class="token punctuation">)</span>

    step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-最大池化的使用"><a href="#6-最大池化的使用" class="headerlink" title="6. 最大池化的使用"></a>6. 最大池化的使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> MaxPool2d
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"../data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                       transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>

<span class="token comment"># input = torch.tensor([[1, 2, 0, 3, 1],</span>
<span class="token comment">#                       [0, 1, 2, 3, 1],</span>
<span class="token comment">#                       [1, 2, 1, 0, 0],</span>
<span class="token comment">#                       [5, 2, 3, 1, 1],</span>
<span class="token comment">#                       [2, 1, 0, 1, 1]], dtype=torch.float32)</span>
<span class="token comment">#</span>
<span class="token comment"># input = torch.reshape(input, (-1, 1, 5, 5))</span>
<span class="token comment"># print(input.shape)</span>

<span class="token keyword">class</span> <span class="token class-name">Tudui</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Tudui<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>maxpool1 <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> ceil_mode<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> output

tudui <span class="token operator">=</span> Tudui<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># output = tudui(input)</span>
<span class="token comment"># print(output)</span>

writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"../logs_maxpool"</span><span class="token punctuation">)</span>
step <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> imgs<span class="token punctuation">,</span> step<span class="token punctuation">)</span>
    output <span class="token operator">=</span> tudui<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> step<span class="token punctuation">)</span>

    step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-非线性激活"><a href="#7-非线性激活" class="headerlink" title="7. 非线性激活"></a>7. 非线性激活</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>datasets
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> ReLU<span class="token punctuation">,</span> Sigmoid
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                      <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"../data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                       transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Tudui</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Tudui<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>relu1 <span class="token operator">=</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sigmoid1 <span class="token operator">=</span> Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> output

tudui <span class="token operator">=</span> Tudui<span class="token punctuation">(</span><span class="token punctuation">)</span>
step <span class="token operator">=</span> <span class="token number">0</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"../logs_relu"</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> imgs<span class="token punctuation">,</span> global_step<span class="token operator">=</span>step<span class="token punctuation">)</span>
    output <span class="token operator">=</span> tudui<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> step<span class="token punctuation">)</span>
    step <span class="token operator">+=</span> <span class="token number">1</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="8-神经网络-搭建小实战和Sequential的使用"><a href="#8-神经网络-搭建小实战和Sequential的使用" class="headerlink" title="8. 神经网络 - 搭建小实战和Sequential的使用"></a>8. 神经网络 - 搭建小实战和Sequential的使用</h2><ul>
<li>CIFAR 10 model 结构</li>
</ul>
<p><img src="C:\Users\31025\Pictures\Screenshots\屏幕截图 2023-11-04 095657.png" alt=""></p>
<ul>
<li>计算</li>
</ul>
<p><img src="C:\Users\31025\Pictures\Screenshots\屏幕截图 2023-11-04 100240.png" alt=""></p>
<ul>
<li>未使用Sequential</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d<span class="token punctuation">,</span> MaxPool2d<span class="token punctuation">,</span> Flatten<span class="token punctuation">,</span> Linear<span class="token punctuation">,</span> Sequential
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter


<span class="token keyword">class</span> <span class="token class-name">Tudui</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Tudui<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 第一个卷积部分</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token comment"># 第一个池化部分</span>
        self<span class="token punctuation">.</span>maxpool1 <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token comment"># 第二个卷积部分</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token comment"># 第二个池化部分</span>
        self<span class="token punctuation">.</span>maxpool2 <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token comment"># 第三个卷积部分</span>
        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token comment"># 第三个池化部分</span>
        self<span class="token punctuation">.</span>maxpool3 <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token comment"># 对数据进行展平</span>
        self<span class="token punctuation">.</span>flatten <span class="token operator">=</span> Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 第一个线性层</span>
        self<span class="token punctuation">.</span>linear1 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
        <span class="token comment"># 第二个线性层</span>
        self<span class="token punctuation">.</span>linear2 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>linear1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>linear2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> x


tudui <span class="token operator">=</span> Tudui<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 利用print进行可视化</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tudui<span class="token punctuation">)</span>
<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
output <span class="token operator">=</span> tudui<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>


<span class="token comment"># 利用tensorboard进行可视化</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"../logs_seq"</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_graph<span class="token punctuation">(</span>tudui<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用Sequential</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d<span class="token punctuation">,</span> MaxPool2d<span class="token punctuation">,</span> Flatten<span class="token punctuation">,</span> Linear<span class="token punctuation">,</span> Sequential
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter


<span class="token keyword">class</span> <span class="token class-name">Tudui</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Tudui<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>module1 <span class="token operator">=</span> Sequential<span class="token punctuation">(</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

        <span class="token keyword">return</span> x


tudui <span class="token operator">=</span> Tudui<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 利用print进行可视化</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tudui<span class="token punctuation">)</span>
<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
output <span class="token operator">=</span> tudui<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>


<span class="token comment"># 利用tensorboard进行可视化</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"../logs_seq"</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_graph<span class="token punctuation">(</span>tudui<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="9-损失函数与反向传播"><a href="#9-损失函数与反向传播" class="headerlink" title="9. 损失函数与反向传播"></a>9. 损失函数与反向传播</h2><p><img src="C:\Users\31025\Pictures\Screenshots\屏幕截图 2023-11-04 121307.png" alt=""></p>
<p>​    <img src="C:\Users\31025\Pictures\Screenshots\屏幕截图 2023-11-04 144942.png" alt=""></p>
<p>​    </p>
<ul>
<li>loss</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> L1Loss<span class="token punctuation">,</span> MSELoss

<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
targets <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
targets <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>targets<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

logs <span class="token operator">=</span> L1Loss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> logs<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> targets<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token comment"># 方差</span>
loss_mes <span class="token operator">=</span> MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
mes_result <span class="token operator">=</span> loss_mes<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> targets<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mes_result<span class="token punctuation">)</span>


x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
loss_cross <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
result_cross <span class="token operator">=</span> loss_cross<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result_cross<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>CrossEntropyLoss</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>datasets
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Sequential<span class="token punctuation">,</span> Conv2d<span class="token punctuation">,</span> MaxPool2d<span class="token punctuation">,</span> Linear<span class="token punctuation">,</span> Flatten
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"../data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                       transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Tudui</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Tudui<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>module1 <span class="token operator">=</span> Sequential<span class="token punctuation">(</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

        <span class="token keyword">return</span> x


loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
tudui <span class="token operator">=</span> Tudui<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data
    output <span class="token operator">=</span> tudui<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    result_loss <span class="token operator">=</span> loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result_loss<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="10-优化器"><a href="#10-优化器" class="headerlink" title="10. 优化器"></a>10. 优化器</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim
<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>datasets
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Sequential<span class="token punctuation">,</span> Conv2d<span class="token punctuation">,</span> MaxPool2d<span class="token punctuation">,</span> Linear<span class="token punctuation">,</span> Flatten
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"../data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                       transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Tudui</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Tudui<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>module1 <span class="token operator">=</span> Sequential<span class="token punctuation">(</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

        <span class="token keyword">return</span> x

loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
tudui <span class="token operator">=</span> Tudui<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 定义优化器</span>
optim <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>tudui<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    running_loss <span class="token operator">=</span> <span class="token number">0.0</span>
    <span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
        imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data
        output <span class="token operator">=</span> tudui<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
        result_loss <span class="token operator">=</span> loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>
        <span class="token comment"># 将网络中的每个参数的梯度清零，以便在下一次反向传播时不会受到之前计算出的梯度的影响。</span>
        optim<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">#  调用损失函数的反向传播，计算出每个节点的梯度。此操作通过链式法则将误差从输出层向输入层传播，并计算每个参数的梯度。</span>
        result_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 使用优化器来更新模型的参数。优化器根据计算出的梯度和选择的优化算法来调整模型参数，以减小损失函数的值。</span>
        optim<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
        running_loss <span class="token operator">=</span> running_loss <span class="token operator">+</span> result_loss
    <span class="token keyword">print</span><span class="token punctuation">(</span>running_loss<span class="token punctuation">)</span>


<span class="token comment"># forward 前向传播</span>
<span class="token comment"># backward 反向传播</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>图的两种存储方式</title>
    <url>/2023/11/07/%E5%9B%BE%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:40px; color:pink">图的两种存储方式</span>
</div>

<h3 id="1-邻接矩阵"><a href="#1-邻接矩阵" class="headerlink" title="1.  邻接矩阵"></a>1.  邻接矩阵</h3><ul>
<li><p><strong>常用于存储稠密图（边数远大于点）</strong></p>
</li>
<li><p><strong>存储方式：</strong></p>
<p>g [a] [b]存储边 a-&gt;b</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment">//n为点数，m为边数</span>
<span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存储稠密图</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//邻接矩阵初始化为正无穷</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
    <span class="token comment">//可能有重边</span>
    g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="2-邻接表"><a href="#2-邻接表" class="headerlink" title="2.邻接表"></a>2.邻接表</h3><ul>
<li><p><strong>常用于存储非稠密图</strong></p>
</li>
<li><p><strong>存储方式：</strong>（存储a-&gt;b的一条边）</p>
<ol>
<li>新节点存储 b 的值</li>
<li>新节点指向原来头结点所指向的</li>
<li>头结点指向新节点</li>
<li>idx ++  </li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment">//n为点数，m为边数</span>
<span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> idx<span class="token punctuation">;</span>

<span class="token comment">//存储a->b的一条边</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//1.新节点存储b的值，2.新节点指向原来的头节点所指向的，3.新节点成为新的头节点，4.idx++</span>
    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">,</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://picdm.sunbangyan.cn/2023/11/07/44ca1975c5f06ec0bbddde9158e3a89e.png" alt=""></p>
</li>
</ul>
]]></content>
      <categories>
        <category>简单算法</category>
      </categories>
      <tags>
        <tag>简单算法</tag>
      </tags>
  </entry>
  <entry>
    <title>2023牛客寒假基础集训营1</title>
    <url>/2023/11/08/2023%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">2023牛客寒假算法基础集训营1</span>
</div>

<p><a href="https://ac.nowcoder.com/acm/contest/46800#question">比赛链接</a></p>
<div align='center'>
    <span style="font-size:30px">A World Final? World Cup! (I)</span>
</div>

<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><ul>
<li><strong>模拟</strong></li>
</ul>
<h4 id="1-题意"><a href="#1-题意" class="headerlink" title="1. 题意"></a>1. 题意</h4><p>A和B两方点球，A队先点，总共10球。给出点球的结果，如：0101011010.</p>
<p>现在需要判断在踢完第几球时结束，并输出第几次，如果10球无法分出胜负就输出-1.</p>
<h4 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h4><p>直接一球球的去判断即可，当另一方无法挽回胜负的时候，也就是剩下的球数全进也无法追平比分，那么就能分出胜负了.</p>
<h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>   
    <span class="token keyword">int</span> t<span class="token punctuation">;</span> cin <span class="token operator">>></span> t<span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        string s<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>
        <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> c1 <span class="token operator">++</span> <span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> c2 <span class="token operator">++</span> <span class="token punctuation">;</span>

            <span class="token comment">//当res==-1，也就是还无法分出胜负.</span>
            <span class="token comment">//c1-c2为A队大于B队的分， (10-i)/2为B队剩下的轮数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c1 <span class="token operator">-</span> c2 <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">||</span> c2 <span class="token operator">-</span> c1 <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">L     本题主要考察了运气</span>
</div>

<h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><ul>
<li><strong>数学, 运气(?)</strong></li>
</ul>
<h4 id="1-题意-1"><a href="#1-题意-1" class="headerlink" title="1. 题意"></a>1. 题意</h4><p>5个团，每个团4个人，求猜中某个人的最佳策略的期望次数</p>
<h4 id="2-解题思路-1"><a href="#2-解题思路-1" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h4><ol>
<li>如题意，可以1到100猜(❌)</li>
<li>每个团和每个人没区别，最佳策略就是依次猜，算出期望次数是5.05，带入给的公式就是32</li>
</ol>
<h4 id="3-代码-1"><a href="#3-代码-1" class="headerlink" title="3. 代码"></a>3. 代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">C     现在是，学术时间 (I)</span>
</div>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul>
<li><strong>诈骗，思维，贪心</strong></li>
</ul>
<h4 id="1-题意-2"><a href="#1-题意-2" class="headerlink" title="1. 题意"></a>1. 题意</h4><p>H为一个教授发表的所有论文，有至少H篇论文引用量大于等于H。现在每个教授有一篇文章，也给出了这篇文章的引用量</p>
<p>重新分配这些文章，要求出重新分配后所有教授的H值的最大</p>
<h4 id="2-解题思路-2"><a href="#2-解题思路-2" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h4><p>实际上不重新分配就是最大值，所有引用量非0的文章都带来了1的H指数，最优解就是非0文章的数量</p>
<h4 id="3-代码-2"><a href="#3-代码-2" class="headerlink" title="3. 代码"></a>3. 代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> x<span class="token punctuation">;</span>
            cin <span class="token operator">>></span> x<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> sum <span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">D     现在是，学术时间 (II)</span>
</div>

<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><ul>
<li>分类讨论    </li>
</ul>
<h4 id="1-题意-3"><a href="#1-题意-3" class="headerlink" title="1. 题意"></a>1. 题意</h4><p>给定两个矩形，需要求出 交集面积/并集面积的最大值.</p>
<p>一个矩形确定了位置，另一个矩形只给了一个点</p>
<h4 id="2-解题思路-3"><a href="#2-解题思路-3" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h4><p>分类讨论就可以，没什么好说的</p>
<h4 id="3-代码-3"><a href="#3-代码-3" class="headerlink" title="3. 代码"></a>3. 代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token keyword">double</span> x1<span class="token punctuation">,</span> <span class="token keyword">double</span> y1<span class="token punctuation">,</span> <span class="token keyword">double</span> x2<span class="token punctuation">,</span> <span class="token keyword">double</span> y2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">double</span> area <span class="token operator">=</span> <span class="token punctuation">(</span>x2 <span class="token operator">*</span> y2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>x1 <span class="token operator">*</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> area<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
<span class="token punctuation">&#123;</span>
    <span class="token keyword">double</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>

    <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">double</span> s1 <span class="token operator">=</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> s2 <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> s3 <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> s4 <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>

        res <span class="token operator">=</span> res <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">></span> m<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">double</span> s1 <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> n <span class="token operator">*</span> y<span class="token punctuation">;</span>
        s1 <span class="token operator">=</span> s1 <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2 <span class="token operator">=</span> s2 <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> y <span class="token operator">+</span> n <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>

        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">double</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token punctuation">,</span> s2 <span class="token operator">=</span> x <span class="token operator">*</span> m<span class="token punctuation">;</span>
        s1 <span class="token operator">=</span> s1 <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2 <span class="token operator">=</span> s2 <span class="token operator">/</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.9f\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token comment">//ios::sync_with_stdio(false);</span>
    <span class="token comment">//cin.tie(nullptr);</span>
    
    <span class="token keyword">int</span> t<span class="token punctuation">;</span> cin <span class="token operator">>></span> t<span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">K     本题主要考察了dp</span>
</div>

<h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><ul>
<li><strong>贪心</strong></li>
</ul>
<h4 id="1-题意-4"><a href="#1-题意-4" class="headerlink" title="1. 题意"></a>1. 题意</h4><p>需要写出一个仅有0和1组成的长度为n的字符串，要求恰好有m个字符是1</p>
<p>而在字符串的长度为3的子区间内，如果1的个数多于0的个数，那么这就是一个坏区间</p>
<p>现在要求出坏区间总数最少的字符串中有几个坏区间</p>
<h4 id="2-解题思路-4"><a href="#2-解题思路-4" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h4><p>(或许贪心真的靠猜？)</p>
<p>写一写试试，就会发现类似10010010001111这样的区间是最优的</p>
<p>我分为3部分：</p>
<ol>
<li>在可以保证剩下的位置放够m个1的前提下，放入100</li>
<li>如果还可以放10，那就放入一个10</li>
<li>将剩下的1放入</li>
</ol>
<h4 id="3-代码-4"><a href="#3-代码-4" class="headerlink" title="3. 代码"></a>3. 代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>

    <span class="token comment">//cnt00代表可以填入的100的个数，也就是可以填入的00的个数，cnt0为可能还可以填入一个0</span>
    <span class="token keyword">int</span> cnt00 <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> cnt0 <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
    string s<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt00<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> s <span class="token operator">+=</span> <span class="token string">"100"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt0<span class="token punctuation">)</span> s <span class="token operator">+=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> cnt00 <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">-</span> cnt0<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> s <span class="token operator">+=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>

    <span class="token comment">//直接枚举，来找到坏区间个数</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> cnt <span class="token operator">++</span> <span class="token punctuation">;</span>   
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> cnt <span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> cnt <span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">++</span> <span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">M 本题主要考察了找规律</span>
</div>

<h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><ul>
<li><strong>DP</strong></li>
</ul>
<h4 id="1-题意-5"><a href="#1-题意-5" class="headerlink" title="1. 题意"></a>1. 题意</h4><p>波奇买了m份章鱼仙贝，来分给n为朋友。</p>
<p>当前剩下的仙贝数为x，给一个朋友y个仙贝，那么这个朋友队小波奇的好感度增加 y/x</p>
<p>每个人最多送一次，需要求出总好感度最大的情况</p>
<h4 id="2-解题思路-5"><a href="#2-解题思路-5" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h4><p>就是DP……知道但做的时候不会写，写的还是太少了，之后其实看看还挺清晰的</p>
<p>f [ i ] [ j ]表示给到了第 i 个朋友，给出了 j 份仙贝, 因为到最后把所有仙贝给出才最大，所以答案是f [n] [m]</p>
<p>状态转移方程： f [i] [j] = max(f [i] [j], f [i - 1] [j - k] + k / (m - (j - k))), 也就是给了第 i 个朋友 k 个仙贝</p>
<h4 id="3-代码-5"><a href="#3-代码-5" class="headerlink" title="3. 代码"></a>3. 代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k <span class="token operator">++</span> <span class="token punctuation">)</span>
                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>k <span class="token operator">/</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.8f\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">G     鸡格线</span>
</div>

<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><ul>
<li><strong>数据结构，性质</strong></li>
</ul>
<h4 id="1-题意-6"><a href="#1-题意-6" class="headerlink" title="1. 题意"></a>1. 题意</h4><p>有一个长度为n的数组a，支持以下两种操作：</p>
<ol>
<li>对区间[l, r] 中的左右数字执行 x = round(10 * sqrt(x)), round为四舍五入</li>
<li>输出当前数组所有数字的和</li>
</ol>
<h4 id="2-解题思路-6"><a href="#2-解题思路-6" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h4><p>模拟什么的肯定过不去，写的时候并没有什么思路，想把操作记录下来，之后再去变值，可是中途会输出所有数字的和，就有点无从下手了（太菜了）</p>
<p>首先有三个临界值0，99，100。也就是每个数在经过几次十几次变化后就会达到临界值的值而不再变化，这样 k 的值就可以转变为一个11以内的数（多次尝试发现11正好能通过）</p>
<p>知道这一点后问题就成为了如何知道谁没有更新，可以用set来存储，然后用lower_bound()来找[l,r]区间内没有到达临界值的数，注意要在set中插入n+1,不然会出现问题</p>
<h4 id="3-代码-6"><a href="#3-代码-6" class="headerlink" title="3. 代码"></a>3. 代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span><span class="token comment">//存储的是下标</span>
ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ll n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>

    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//如果还没有到达临界值，就进入set集合</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token punctuation">&#125;</span> 

    <span class="token comment">//防止越界访问!!!</span>
    st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> op<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> op<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
            cin <span class="token operator">>></span> l <span class="token operator">>></span> r <span class="token operator">>></span> k<span class="token punctuation">;</span>
            <span class="token comment">//从l开始找</span>
            <span class="token keyword">int</span> pos <span class="token operator">=</span> l<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">//找到大于等于当前的在集合中的下标</span>
                <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token operator">*</span>st<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//超出了r，就跳出循环</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token comment">//更新k次，实际更新次数很小，所以取min(k,11)</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    sum <span class="token operator">-=</span> a<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    a<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>             
                <span class="token comment">//如果到达临界值，就移除set集合      </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//后移一位</span>
                pos <span class="token operator">=</span> now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">F     鸡玩炸蛋人</span>
</div>

<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><ul>
<li><strong>思维，图论，并查集</strong></li>
</ul>
<h4 id="1-题意-7"><a href="#1-题意-7" class="headerlink" title="1. 题意"></a>1. 题意</h4><p>n个结点，m条边，可以控制炸蛋人进行操作：移动和放置炸弹。不能移动到有炸蛋的地方，但可以从有炸蛋的地方出发。</p>
<p>现在给出最终给出每个点的炸蛋数量，需要求出有多少种起点终点方案（保证起点终点至少有一个不同）</p>
<h4 id="2-解题思路-7"><a href="#2-解题思路-7" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h4><p>在连通块内，无论炸蛋如何防止，以任意两点作为起点和终点，都可以做到，</p>
<p>引用大佬的证明：</p>
<p><img src="https://picss.sunbangyan.cn/2023/11/08/3c50df01761e1b44debdcaccdc974c0f.png" alt=""></p>
<p>连边之后，分成了多个连通块。这样可以分成3种情况：</p>
<ol>
<li>有大于一个连通块有炸蛋，因为连通块之间并不连接，所以无解</li>
<li>只有一个连通块有炸蛋，这样就只能在这一个连通块中移动，才能保证最终可以放置炸蛋</li>
<li>没有连通块有炸蛋，此时可以在任意一个连通块内移动</li>
</ol>
<h4 id="3-代码-7"><a href="#3-代码-7" class="headerlink" title="3. 代码"></a>3. 代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>

<span class="token comment">//维护并查集</span>
<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//合并并查集，并且更新联通块数量</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    p<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
    num<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+=</span> num<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>

    <span class="token comment">//初始化并查集，自己为跟节点。 初始化连通块数量为1。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> 
        <span class="token punctuation">&#123;</span>
            <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//存储有炸蛋的连通块</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> x<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> mp<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//分3种情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>first<span class="token punctuation">;</span>
        ll res <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">*</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                res <span class="token operator">=</span> res <span class="token operator">+</span> <span class="token number">1ll</span> <span class="token operator">*</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px">E     鸡算几何</span>
</div>

<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><ul>
<li><strong>计算集合，叉乘</strong></li>
</ul>
<h4 id="1-题意-8"><a href="#1-题意-8" class="headerlink" title="1. 题意"></a>1. 题意</h4><p>二维的平面上有一根 L 型的铁丝，由AB和BC两条线段组成，现在能对这根铁丝进行三种操作：</p>
<ol>
<li>任意平移即铁丝上每一个点横坐标都变化Δ<em>x</em>、纵坐标都变化Δ<em>y</em>；</li>
<li>以B点为轴，任意的旋转铁丝</li>
<li>将铁丝拿起，在手里任意调整铁丝后，再放回（不能使铁丝发生形变）</li>
</ol>
<p>操作完后铁丝为DEF(不保证和ABC三点一 一对应)，现在给出ABC和DEF的坐标。</p>
<p>需要判断：是否可以断言一定使用过至少一次第三次操作</p>
<h4 id="2-解题思路-8"><a href="#2-解题思路-8" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h4><ul>
<li>一大坑点：<strong>ABC和DEF不一定对应</strong></li>
</ul>
<p>当时这个大坑点，我调了很久都调不过来，印象深刻(寄)</p>
<p>其实就是判断有没有进行过翻着就可以了，然后就用到了叉乘，（第一次见）</p>
<p>先根据长度来判断对应的边，然后判断叉乘的正负是否相同即可判断是否发生了翻折。</p>
<p>特判：当AB和BC两条边相等时，就无法判断是否发生了翻折</p>
<h4 id="3-代码-8"><a href="#3-代码-8" class="headerlink" title="3. 代码"></a>3. 代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-9</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">double</span> x1<span class="token punctuation">,</span> <span class="token keyword">double</span> y1<span class="token punctuation">,</span> <span class="token keyword">double</span> x2<span class="token punctuation">,</span> <span class="token keyword">double</span> y2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">double</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">double</span> x1<span class="token punctuation">,</span> <span class="token keyword">double</span> y1<span class="token punctuation">,</span> <span class="token keyword">double</span> x2<span class="token punctuation">,</span> <span class="token keyword">double</span> y2<span class="token punctuation">,</span> <span class="token keyword">double</span> x3<span class="token punctuation">,</span> <span class="token keyword">double</span> y3<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y2 <span class="token operator">-</span> y3<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x2 <span class="token operator">-</span> x3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">double</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> x4<span class="token punctuation">,</span> y4<span class="token punctuation">,</span> x5<span class="token punctuation">,</span> y5<span class="token punctuation">,</span> x6<span class="token punctuation">,</span> y6<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> x1 <span class="token operator">>></span> y1 <span class="token operator">>></span> x2 <span class="token operator">>></span> y2 <span class="token operator">>></span> x3 <span class="token operator">>></span> y3<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> x4 <span class="token operator">>></span> y4 <span class="token operator">>></span> x5 <span class="token operator">>></span> y5 <span class="token operator">>></span> x6 <span class="token operator">>></span> y6<span class="token punctuation">;</span>

        <span class="token keyword">double</span> len1 <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果AB和BC长度相等，那就无法判断是否发生翻折</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>len1 <span class="token operator">-</span> len2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> eps<span class="token punctuation">)</span> 
        <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">int</span> res1 <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">double</span> len3 <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>x4<span class="token punctuation">,</span> y4<span class="token punctuation">,</span> x5<span class="token punctuation">,</span> y5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> res2<span class="token punctuation">;</span>
        <span class="token comment">//根据AB和DE的长度，来判断是否对应，并求出DEF叉乘</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>len3 <span class="token operator">-</span> len1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> eps<span class="token punctuation">)</span> res2 <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>x4<span class="token punctuation">,</span> y4<span class="token punctuation">,</span> x5<span class="token punctuation">,</span> y5<span class="token punctuation">,</span> x6<span class="token punctuation">,</span> y6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> res2 <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>x6<span class="token punctuation">,</span> y6<span class="token punctuation">,</span> x5<span class="token punctuation">,</span> y5<span class="token punctuation">,</span> x4<span class="token punctuation">,</span> y4<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//如果叉乘正负性不同，就代表发生偏折</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res1 <span class="token operator">*</span> res2 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>牛客寒假</tag>
      </tags>
  </entry>
  <entry>
    <title>计算几何</title>
    <url>/2023/11/15/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:40px; color:pink">计算几何</span>
</div>



<ol>
<li><p>面积：二维向量叉乘等于围成的平行四边形的面积 <strong>(取绝对值)</strong>，除以二就是所围成的三角形的面积。</p>
</li>
<li><p>顺逆：根据叉乘的正负可以判断两条边是顺逆排列，<strong>为正就是顺时针排列</strong>。</p>
</li>
<li><p>长度：向量的长度是向量本身的<strong>点积的平方根</strong></p>
</li>
<li><p>角度：两个向量夹角的余弦等于它们的点积与它们长度的乘积的商<strong>(A和B的点积 / A和B的模长)</strong></p>
</li>
</ol>
<ul>
<li>抄的 jls 的板子(</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
    db x<span class="token punctuation">;</span>
    db y<span class="token punctuation">;</span>
    <span class="token function">Point</span><span class="token punctuation">(</span>db x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> db y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
     
    Point <span class="token operator">&amp;</span>operator<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x <span class="token operator">+=</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+=</span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    Point <span class="token operator">&amp;</span>operator<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x <span class="token operator">-=</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-=</span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    Point <span class="token operator">&amp;</span>operator<span class="token operator">*=</span><span class="token punctuation">(</span><span class="token keyword">const</span> db <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x <span class="token operator">*=</span> v<span class="token punctuation">,</span> y <span class="token operator">*=</span> v<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    friend Point operator<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token operator">-</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    friend Point operator<span class="token operator">+</span><span class="token punctuation">(</span>Point lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Point <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> lhs <span class="token operator">+=</span> rhs<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    friend Point operator<span class="token operator">-</span><span class="token punctuation">(</span>Point lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Point <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> lhs <span class="token operator">-=</span> rhs<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    friend Point operator<span class="token operator">*</span><span class="token punctuation">(</span>Point lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> db <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> lhs <span class="token operator">*=</span> rhs<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

db <span class="token function">dot</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token keyword">const</span> Point <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> u<span class="token punctuation">.</span>x <span class="token operator">*</span> v<span class="token punctuation">.</span>x <span class="token operator">+</span> u<span class="token punctuation">.</span>y <span class="token operator">*</span> v<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//记得传的是边(点相减)</span>
db <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token keyword">const</span> Point <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

db <span class="token function">cross</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token keyword">const</span> Point <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> u<span class="token punctuation">.</span>x <span class="token operator">*</span> v<span class="token punctuation">.</span>y <span class="token operator">-</span> u<span class="token punctuation">.</span>y <span class="token operator">*</span> v<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>板子</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>三层架构</title>
    <url>/2023/11/05/javaweb_%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">三层架构：软件设计架构</span>
</div>


<p><strong>1. 界面层（表示层）：用户看的界面。用户可以通过界面上的组件和服务器进行交互</strong></p>
<p><strong>2. 业务逻辑层：处理业务逻辑的。</strong></p>
<p><strong>3. 数据访问层：操作数据存储文件。</strong></p>
<ul>
<li><p>图例</p>
<p><img src="https://picdl.sunbangyan.cn/2023/11/05/3b247277da0209952ea8396d1728b607.png" alt=""></p>
</li>
</ul>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>javase_IO流</title>
    <url>/2023/11/16/javase_IO%E6%B5%81/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">IO流</span>    
</div>


<ul>
<li><strong>不要忘记释放资源  close()</strong></li>
</ul>
<h3 id="1-File"><a href="#1-File" class="headerlink" title="1. File"></a>1. File</h3><h4 id="1-File类概述和构造方法"><a href="#1-File类概述和构造方法" class="headerlink" title="1. File类概述和构造方法"></a>1. File类概述和构造方法</h4><ul>
<li>File：他是文件和目录路径名的抽象表示</li>
<li>文件和目录是可以通过File封装成对象得到</li>
<li>对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。</li>
</ul>
<h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2. 构造方法"></a>2. 构造方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token number">2.</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> parent<span class="token punctuation">,</span> <span class="token class-name">String</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">3.</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">File</span> parend<span class="token punctuation">,</span> <span class="token class-name">String</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="3-File类功能创建"><a href="#3-File类功能创建" class="headerlink" title="3. File类功能创建"></a>3. File类功能创建</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">//创建新空文件（非文件夹）</span>
<span class="token number">2.</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		   <span class="token comment">//创建新空目录</span>
<span class="token number">3.</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		   <span class="token comment">//创建新空目录，包括父目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="4-File类判断-和-获取功能"><a href="#4-File类判断-和-获取功能" class="headerlink" title="4. File类判断 和 获取功能"></a>4. File类判断 和 获取功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment">//判断是否为目录</span>
<span class="token number">2.</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		    <span class="token comment">//判断是否为文件</span>
<span class="token number">3.</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		    <span class="token comment">//判断文件是否存在</span>

<span class="token number">4.</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">//返回绝对路径名           (最全)</span>
<span class="token number">5.</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		   <span class="token comment">//返回路径名     	         (返回值取决于构造参数)</span>
<span class="token number">6.</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		   <span class="token comment">//返回最终文件和目录的名称  (最终)</span>

<span class="token number">7.</span> <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		   <span class="token comment">//返回此目录中的文件和目录的名称</span>
<span class="token number">8.</span> <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//返回此目录中的文件和目录名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-File类删除功能"><a href="#5-File类删除功能" class="headerlink" title="5. File类删除功能"></a>5. File类删除功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment">//删除文件或目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除目录注意事项：如果一个目录中由内容(目录，文件)，不能直接删除，先删除内容</li>
</ul>
<h3 id="2-IO流"><a href="#2-IO流" class="headerlink" title="2. IO流"></a>2. IO流</h3><h4 id="1-IO流的概述和分类："><a href="#1-IO流的概述和分类：" class="headerlink" title="1. IO流的概述和分类："></a>1. IO流的概述和分类：</h4><h5 id="1-IO流概述："><a href="#1-IO流概述：" class="headerlink" title="1. IO流概述："></a>1. IO流概述：</h5><ul>
<li>硬盘 —&gt; 内存    写数据   输出</li>
<li>硬盘 &lt;— 内存    读数据   输入</li>
</ul>
<ol>
<li>内存上的内容放到硬盘上(输出，写数据(内存数据写到硬盘上))</li>
<li>硬盘中的内容加载到内存(输入，读数据(硬盘读数据到内存))</li>
<li>GPT解释(:<ul>
<li>将内存上的数据写入硬盘中被称为输出操作，而将硬盘上的数据加载到内存中被称为输入操作。在编程中，输出通常意味着将数据从内存写入到硬盘上的文件或其他存储设备中，而输入则是将文件或其他存储设备中的数据读取到内存中进行处理。</li>
</ul>
</li>
</ol>
<h5 id="2-IO流分类："><a href="#2-IO流分类：" class="headerlink" title="2. IO流分类："></a>2. IO流分类：</h5><ol>
<li>按照数据的流向：<ol>
<li>输入流：读数据</li>
<li>输出流：写数据</li>
</ol>
</li>
<li>按照数据类型来分：<ol>
<li>字节流：<ul>
<li>字节输入流，字节输出流</li>
</ul>
</li>
<li>字符流<ul>
<li>字符输入流，字符输出流</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="3-字节流"><a href="#3-字节流" class="headerlink" title="3. 字节流"></a>3. 字节流</h3><h4 id="1-字节流抽象基类"><a href="#1-字节流抽象基类" class="headerlink" title="1. 字节流抽象基类"></a>1. 字节流抽象基类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">InputStream</span><span class="token operator">:</span>	  <span class="token comment">//这个抽象类是表示字节输入流的所有类的超类</span>
<span class="token number">2.</span> <span class="token class-name">OutputStream</span><span class="token operator">:</span>  <span class="token comment">//这个抽象类是表示字节输出流的所有类的超类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="2-子类名的特定："><a href="#2-子类名的特定：" class="headerlink" title="2. 子类名的特定："></a>2. 子类名的特定：</h4><ul>
<li>子类名称都是以父类民作为子类名的后缀</li>
</ul>
<h4 id="3-使用字节输出流-写数据的步骤"><a href="#3-使用字节输出流-写数据的步骤" class="headerlink" title="3.  使用字节输出流 写数据的步骤"></a>3.  使用字节输出流 写数据的步骤</h4><ol>
<li>创建字节输出流对象    (调用系统资源创建文件，创建字节输出流对象，让字节输出流指向对象文件)</li>
<li>调用字节输出流的写数据方法</li>
<li>释放资源      (关闭此文件输出流，并释放与此相关联的任何系统资源)</li>
</ol>
<h4 id="4-常用方法："><a href="#4-常用方法：" class="headerlink" title="4. 常用方法："></a>4. 常用方法：</h4><h5 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1. 构造方法"></a>1. 构造方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">FileOutputStream</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>
<span class="token number">2.</span> <span class="token class-name">FileOutputStream</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="2-写数据的三种方法"><a href="#2-写数据的三种方法" class="headerlink" title="2. 写数据的三种方法"></a>2. 写数据的三种方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">void</span> write <span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token number">2.</span> <span class="token keyword">void</span> write <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span>	 <span class="token string">"hanyue.getbytes()"</span> <span class="token operator">--</span><span class="token operator">></span> 将字符串快速转化为<span class="token keyword">byte</span>数组
<span class="token number">3.</span> <span class="token keyword">void</span> write <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="5-两个小问题："><a href="#5-两个小问题：" class="headerlink" title="5. 两个小问题："></a>5. 两个小问题：</h4><ul>
<li>txt 里面自带换行，读入时会读入换行。</li>
</ul>
<ol>
<li><p>字节流读入换行数据</p>
<ul>
<li>windows:  \r\n</li>
<li>linux:       \n</li>
<li>mac:        \r</li>
</ul>
</li>
<li><p>字节流写数据如何实现追加写入</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FileOutputStream</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">)</span> 
<span class="token comment">//如果第二个参数是true，那么字节写入文件的末尾而不是开头</span>
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h4 id="6-字节流写数据异常处理"><a href="#6-字节流写数据异常处理" class="headerlink" title="6. 字节流写数据异常处理"></a>6. 字节流写数据异常处理</h4><ol>
<li><p>finally : 在异常处理中使用finally来执行所有清楚操作。比如 IO 流中的释放资源</p>
</li>
<li><p>特点：被finally 控制的语句一定会执行，除非JVM退出</p>
</li>
<li><p>格式：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//可能出现的异常;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类名，变量名<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//异常的处理代码;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//执行所有清除操作;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h4 id="7-字节流读数据"><a href="#7-字节流读数据" class="headerlink" title="7. 字节流读数据"></a>7. 字节流读数据</h4><ol>
<li><strong>概念定义</strong>：<ol>
<li>FileInputStream: 从文件系统中的文件读取字节</li>
<li>FileInputStream (String name) </li>
</ol>
</li>
<li><strong>使用字节输入流读数据的步骤</strong><ol>
<li>创建字节输入流对象</li>
<li>调用字节输入流对象的读数据方法</li>
<li>释放资源     (不要忘记)</li>
</ol>
</li>
</ol>
<h4 id="8-字节缓冲流"><a href="#8-字节缓冲流" class="headerlink" title="8. 字节缓冲流"></a>8. 字节缓冲流</h4><ul>
<li><p><strong>构造方法</strong>：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 字节缓冲输出流：<span class="token class-name">BufferedOutputStream</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span><span class="token punctuation">)</span>
<span class="token number">2.</span> 字节缓冲输入流：<span class="token class-name">BufferedInputStream</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>为什么构造方法需要的是字节流：</p>
<ul>
<li>因为字节缓冲流仅仅提供缓冲区，而真正读写数据还得依靠基本的字节流对象进行操作</li>
</ul>
</li>
</ul>
<h3 id="4-字符流"><a href="#4-字符流" class="headerlink" title="4. 字符流"></a>4. 字符流</h3><ul>
<li><strong>flush()</strong></li>
<li><strong>由于字符与字节的处理方式不同，在底层进行数据存储和读取时可能存在差异。</strong></li>
</ul>
<h4 id="1-为什么会出现字符流"><a href="#1-为什么会出现字符流" class="headerlink" title="1. 为什么会出现字符流"></a>1. 为什么会出现字符流</h4><ol>
<li>字符流 = 字节流 + 编码表</li>
<li>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</li>
</ol>
<h4 id="2-编码表"><a href="#2-编码表" class="headerlink" title="2. 编码表"></a>2. 编码表</h4><ul>
<li>计算机存储的信息都是二进制表示的(</li>
</ul>
<ol>
<li>ASCII字符集</li>
<li>GBXXX字符集    GBK：最常用的中文码表</li>
<li>Unicode字符集    UTF - 8编码</li>
</ol>
<h4 id="3-字符串中的编码解码及问题"><a href="#3-字符串中的编码解码及问题" class="headerlink" title="3. 字符串中的编码解码及问题"></a>3. 字符串中的编码解码及问题</h4><h5 id="1-编码"><a href="#1-编码" class="headerlink" title="1. 编码"></a>1. 编码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getbytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//使用平台默认的字符集将该String编码为一系列字节</span>
<span class="token number">2.</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getbytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> charseName<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//自定义...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="2-解码"><a href="#2-解码" class="headerlink" title="2. 解码"></a>2. 解码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//通过平台默认的字符集解码指定的字节数组来构造新的String</span>
<span class="token number">2.</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">String</span> charseName<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//自定义...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="3-字符串中的编码解码问题"><a href="#3-字符串中的编码解码问题" class="headerlink" title="3. 字符串中的编码解码问题"></a>3. 字符串中的编码解码问题</h4><h5 id="1-字符流抽象基类"><a href="#1-字符流抽象基类" class="headerlink" title="1. 字符流抽象基类"></a>1. 字符流抽象基类</h5><ol>
<li>Reader : 字符流入类的抽象类</li>
<li>Writer : 字符流出类的抽象类</li>
</ol>
<h5 id="2-字符流中的编码解码问题相关的两个类"><a href="#2-字符流中的编码解码问题相关的两个类" class="headerlink" title="2. 字符流中的编码解码问题相关的两个类"></a>2. 字符流中的编码解码问题相关的两个类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">InputStreamReader</span>
	<span class="token keyword">public</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">String</span> charsetName<span class="token punctuation">)</span>
<span class="token number">2.</span> <span class="token class-name">OutputStreamWriter</span>
	<span class="token keyword">public</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">OUtputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span> <span class="token class-name">String</span> charsetName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-字符流写数据的五种方式："><a href="#4-字符流写数据的五种方式：" class="headerlink" title="4. 字符流写数据的五种方式："></a>4. 字符流写数据的五种方式：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>	<span class="token comment">//写一个字符</span>
<span class="token number">2.</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span>	<span class="token comment">//写入一个字符数组</span>
<span class="token number">3.</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>	<span class="token comment">//写入字符数组的一部分</span>
<span class="token number">4.</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>	<span class="token comment">//写入一个字符串</span>
<span class="token number">5.</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>		<span class="token comment">//写入一个字符串的一部分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>flush()    //刷新流，还可以继续写数据</li>
<li>close()   //关闭流，释放资源，但是在关闭之前会先刷新流。  一旦关闭，不能再写数据。</li>
</ol>
<h4 id="5-字符流读数据的两种方式"><a href="#5-字符流读数据的两种方式" class="headerlink" title="5. 字符流读数据的两种方式"></a>5. 字符流读数据的两种方式</h4><ol>
<li>int read()    //一次读一个字符数据</li>
<li>int read(char[] cbuf)    //一次读一个字符数组数据</li>
</ol>
<h4 id="6-改进"><a href="#6-改进" class="headerlink" title="6. 改进"></a>6. 改进</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Filename</span><span class="token punctuation">)</span>   <span class="token comment">//用于读取字符文件的便捷类</span>
<span class="token number">2.</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Filename</span><span class="token punctuation">)</span>   <span class="token comment">//用于写入字符文件的便捷类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="7-字符缓冲流"><a href="#7-字符缓冲流" class="headerlink" title="7. 字符缓冲流"></a>7. 字符缓冲流</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out<span class="token punctuation">)</span>
<span class="token number">2.</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="8-字符缓冲流特有的功能"><a href="#8-字符缓冲流特有的功能" class="headerlink" title="8. 字符缓冲流特有的功能"></a>8. 字符缓冲流特有的功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">BufferedWriter</span>
	<span class="token keyword">void</span> <span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//写一行分隔符，行分隔符字符串由系统定义</span>
<span class="token number">2.</span> <span class="token class-name">BufferedReader</span>
	<span class="token keyword">void</span> <span class="token class-name">String</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//读一行文字。不包括终止内容(例如：换行符)，如果流已到达结尾，则为null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="9-IO流小结"><a href="#9-IO流小结" class="headerlink" title="9. IO流小结"></a>9. IO流小结</h4><ul>
<li><p>(in read)   (out write)</p>
</li>
<li><p><strong>三件套</strong></p>
<ul>
<li>bw.write(data);</li>
<li>bw.newLine();</li>
<li>bw.flush();   方法用于将缓冲区中的数据立即写入目标流。具体来说，他会强制刷新输出缓冲区，并将缓冲区中的数据推送到底层流。</li>
</ul>
</li>
</ul>
<h3 id="5-特殊操作流"><a href="#5-特殊操作流" class="headerlink" title="5.特殊操作流"></a>5.特殊操作流</h3><h4 id="1-标准输入输出流"><a href="#1-标准输入输出流" class="headerlink" title="1. 标准输入输出流"></a>1. 标准输入输出流</h4><ul>
<li>略</li>
</ul>
<h4 id="2-打印流"><a href="#2-打印流" class="headerlink" title="2. 打印流"></a>2. 打印流</h4><ol>
<li>字节打印流  printStream</li>
<li>字符打印流  printWriter</li>
</ol>
<p><strong>1. 打印流特点</strong></p>
<ol>
<li>只负责输出数据，不负责读取数据</li>
<li>有自己的特有方法</li>
</ol>
<p><strong>2. 字节打印流</strong></p>
<ol>
<li>PrintStream(String fileName) : 使用指定的文件名创建打印流</li>
<li>使用特有方法写数据，查看的数据原样输出</li>
</ol>
<p><strong>3. 字符打印流</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span>    <span class="token comment">//不会自动刷新</span>
<span class="token number">2.</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoFlush<span class="token punctuation">)</span>  <span class="token comment">//如果为true，则会自动刷新出缓冲区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="3-对象序列化流"><a href="#3-对象序列化流" class="headerlink" title="3. 对象序列化流"></a>3. 对象序列化流</h4><ol>
<li>构造方法： ObjectOutputStream(OutputStream out)</li>
<li>序列化对象的方法：void writeObject(Object obj)</li>
<li>注意：<ol>
<li>一个对象想要序列化，该对象所属的类必须实现Serializable接口</li>
<li>Serializable是一个标记接口，实现该接口，不需要重写任何方法</li>
</ol>
</li>
<li>其他<ol>
<li>给对象序列化流序列化一个对象后，修改对象所属的类文件，如何解决：<ul>
<li>给所属对象加一个serialVersionUID: private static final long serialVersionUID = 42L;</li>
</ul>
</li>
<li>成员变量值不被初始化：<ul>
<li>给成员变量加transient关键字，该关键字标记的成员变量不参与序列化过程</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="4-对象反序列化流"><a href="#4-对象反序列化流" class="headerlink" title="4. 对象反序列化流"></a>4. 对象反序列化流</h4><ol>
<li>构造方法：                   ObjectInputStream(InputStream in)</li>
<li>反序列化对象的方法： Object readObject()</li>
</ol>
<h4 id="5-Properties"><a href="#5-Properties" class="headerlink" title="5. Properties"></a>5. Properties</h4><ol>
<li><p>概述：</p>
<ol>
<li>是一个Map体系的集合类   (Properties类继承自Hashtable类)</li>
<li>Properties可以保存到流中或从流中加载</li>
</ol>
</li>
<li><p>Properties 作为集合特有的方法</p>
</li>
<li><p>Properties和IO流集合的方法：</p>
<ol>
<li><p>字节流</p>
<ol>
<li>void load(InputStream Instream)</li>
<li>void store(OutputStream out, String comments)</li>
</ol>
</li>
<li><p>字符流</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">)</span>                          <span class="token comment">//输入字符流 (也存入了表中)</span>
<span class="token number">2.</span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> writer<span class="token punctuation">,</span> <span class="token class-name">String</span> comments<span class="token punctuation">)</span>        <span class="token comment">//写入Properties 表中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>修饰符</title>
    <url>/2023/10/27/javase_%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink;">修饰符</span>
</div>


<h2 id="1-包"><a href="#1-包" class="headerlink" title="1. 包"></a>1. 包</h2><ol>
<li>就是文件夹</li>
<li>作用：分类管理</li>
</ol>
<h2 id="2-导包"><a href="#2-导包" class="headerlink" title="2. 导包"></a>2. 导包</h2><ol>
<li>import 包名    <ul>
<li>例：import  cn.itcast.Teacher;</li>
</ul>
</li>
</ol>
<h2 id="3-修饰符"><a href="#3-修饰符" class="headerlink" title="3. 修饰符"></a>3. 修饰符</h2><ul>
<li>private  &gt;  默认  &gt;  protected  &gt;  public</li>
</ul>
<h3 id="1-权限"><a href="#1-权限" class="headerlink" title="1. 权限"></a>1. 权限</h3><ol>
<li>同一包中  4</li>
<li>同一包子类无关类  3</li>
<li>不同包子类  2</li>
<li>不同包非子类1</li>
</ol>
<ul>
<li>导包后定义的就是自己的类</li>
</ul>
<h3 id="2-final-和-static"><a href="#2-final-和-static" class="headerlink" title="2. final 和 static"></a>2. final 和 static</h3><h4 id="1-final"><a href="#1-final" class="headerlink" title="1. final"></a>1. final</h4><ol>
<li>定义：public  final  void  zi  （）{ }      <ul>
<li>带了final后不可以在重写</li>
</ul>
</li>
<li>被final修饰的变量成为常量，不能再改变</li>
<li>被final修饰的类也不能成为父类</li>
</ol>
<h4 id="2-static"><a href="#2-static" class="headerlink" title="2. static"></a>2. static</h4><ol>
<li>（static）共享</li>
<li>推荐使用类名调用</li>
<li>静态成员方法只能访问静态的成员变量和成员方法</li>
</ol>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>内部类</title>
    <url>/2023/10/27/javase_%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">内部类</span>
</div>


<h3 id="1-访问特点"><a href="#1-访问特点" class="headerlink" title="1. 访问特点"></a>1. 访问特点</h3><ol>
<li>内部类可以直接访问外部类成员包括私有</li>
<li>外部类必须创建对象，才能访问内部类成员</li>
</ol>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><ol>
<li>通用：new 类或接口名（）{ }；</li>
<li>例子：Inter i = new Inter () { };</li>
</ol>
<h4 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h4><ul>
<li>匿名内部类终究是一个类</li>
</ul>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>多态</title>
    <url>/2023/10/27/javase_%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">多态</span>
</div>


<h3 id="1-多态的前提和体现"><a href="#1-多态的前提和体现" class="headerlink" title="1. 多态的前提和体现"></a>1. 多态的前提和体现</h3><ol>
<li>有继承 / 实现关系（父类，子类）</li>
<li>有方法重写</li>
<li>有父类引用指向子类对象<ul>
<li>例如：Father父类，Son子类。 Father  s = new Son ()；</li>
</ul>
</li>
<li>技巧：<ul>
<li>（全看左边，若有重写则优先执行重写）</li>
<li>编译看左边，执行看右边</li>
</ul>
</li>
</ol>
<h3 id="2-优劣"><a href="#2-优劣" class="headerlink" title="2. 优劣"></a>2. 优劣</h3><h4 id="1-好处"><a href="#1-好处" class="headerlink" title="1. 好处"></a>1. 好处</h4><ul>
<li>提高了程序的拓展性</li>
</ul>
<h4 id="2-弊端"><a href="#2-弊端" class="headerlink" title="2. 弊端"></a>2. 弊端</h4><ul>
<li>不能使用子类的特有功能</li>
</ul>
<h4 id="3-应对弊端"><a href="#3-应对弊端" class="headerlink" title="3. 应对弊端"></a>3. 应对弊端</h4><ul>
<li>向下转型：<ul>
<li>例：Cat  c = （Cat）a；（强制转换）（只有父子可以这样）</li>
</ul>
</li>
</ul>
<h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h3><ul>
<li>无法直接调用就用多态<ul>
<li>例如：接口，抽象类</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2023/10/20/javase_%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p><div align='center'>
    <font size='8' color='pink'>字符串</font>
</div></p>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>应用程序开发接口的缩写。意思是一些预设好的函数或方法，允许第三方程序通过网络来调用数据或基于数据的服务。(而无需关注如何实现)</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="String-构造方法："><a href="#String-构造方法：" class="headerlink" title="String 构造方法："></a>String 构造方法：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据字符数组的内容，来创建字符串</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据字节数组的内容，来创建字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断s和ss是否相等</span>
s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回s在位置i中的字符</span>
s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回字符长度(一般数组也可以用)</span>
s<span class="token punctuation">.</span><span class="token function">tocharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token comment">// 以,为分割依据得到ss字符串数组</span>
    						<span class="token comment">// 用来摘取字符串</span>
s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">// 比较两字符串的大小</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span>任意类型<span class="token punctuation">)</span><span class="token operator">:</span> 添加数据，并返回对象本身
<span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 返回相反的字符序列
a<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"sffdf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"sdfds"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"djfdsf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="String-与-StringBuilder"><a href="#String-与-StringBuilder" class="headerlink" title="String 与 StringBuilder"></a>String 与 StringBuilder</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> 转 <span class="token class-name">StringBuilder</span><span class="token operator">:</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
					   <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuilder</span> 转 <span class="token class-name">String</span><span class="token operator">:</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					   <span class="token class-name">String</span> s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>常用API</title>
    <url>/2023/10/29/javase_%E5%B8%B8%E7%94%A8API/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">常用API</span>
</div>

<h2 id="1-Math"><a href="#1-Math" class="headerlink" title="1. Math"></a>1. Math</h2><h3 id="Math常用方法"><a href="#Math常用方法" class="headerlink" title="Math常用方法"></a>Math常用方法</h3><ol>
<li>Math.ceil(double a)<ul>
<li>返回大于等于 a 的最小整数(返回 double 类型 .0)</li>
</ul>
</li>
<li>Math.floor(double a)<ul>
<li>返回小于等于 a 的最大整数(返回 double 类型 .0)</li>
</ul>
</li>
<li>Math.round(float a)<ul>
<li>返回四舍五入的 a 的值</li>
</ul>
</li>
<li>Math.pow(double a, double b)<ul>
<li>返回 a 的 b 次幂($a^b$); (返回 double 类型 .0)</li>
</ul>
</li>
<li>Math.random()<ul>
<li>返回 double 的正值 [0.0, 1.0</li>
</ul>
</li>
</ol>
<h2 id="2-System"><a href="#2-System" class="headerlink" title="2. System"></a>2. System</h2><h3 id="System常用方法"><a href="#System常用方法" class="headerlink" title="System常用方法"></a>System常用方法</h3><ol>
<li>System.exit(0);<ul>
<li>终止当前 java 虚拟机，非 0 表示异常终止</li>
</ul>
</li>
<li>System.currentTimeMills();<ul>
<li>返回当前时间（以毫秒为单位）</li>
</ul>
</li>
</ol>
<h2 id="3-Object"><a href="#3-Object" class="headerlink" title="3. Object"></a>3. Object</h2><h3 id="1-Object-概述"><a href="#1-Object-概述" class="headerlink" title="1. Object 概述"></a>1. Object 概述</h3><ol>
<li>Object 是类层次结构的根，每个类都可以将 Object 作为超类</li>
<li>所有类都可以直接或间接继承该类</li>
</ol>
<h3 id="2-Object-构造方法"><a href="#2-Object-构造方法" class="headerlink" title="2. Object 构造方法"></a>2. Object 构造方法</h3><ol>
<li>public Object()</li>
</ol>
<h3 id="3-Object-方法"><a href="#3-Object-方法" class="headerlink" title="3. Object 方法"></a>3. Object 方法</h3><ol>
<li>to_String();  建议重写 <ul>
<li>默认：调用对象的toString()将返回一个由类名和散列码组成的字符串（如 com.example.MyClass@1234567), 并不包含有关对象属性或状态信息</li>
</ul>
</li>
<li>equals();  建议重写<ul>
<li>默认：只有当两个对象引用指向同一内存地址时，才会返回true</li>
</ul>
</li>
</ol>
<h2 id="4-Array"><a href="#4-Array" class="headerlink" title="4. Array"></a>4. Array</h2><h3 id="Array-常用方法"><a href="#Array-常用方法" class="headerlink" title="Array 常用方法"></a>Array 常用方法</h3><ol>
<li>toString(int[ ] a)<ul>
<li>返回指定数组内容的字符串表达形式</li>
</ul>
</li>
<li>sort(int[ ] a)<ul>
<li>按数字排序</li>
</ul>
</li>
</ol>
<h2 id="5-基本类型包装类"><a href="#5-基本类型包装类" class="headerlink" title="5. 基本类型包装类"></a>5. 基本类型包装类</h2><h3 id="1-常用的操作之一"><a href="#1-常用的操作之一" class="headerlink" title="1. 常用的操作之一"></a>1. 常用的操作之一</h3><ul>
<li>用于基本数据类型与字符串之间的转换</li>
</ul>
<h3 id="2-基本数据类型-和-包装类"><a href="#2-基本数据类型-和-包装类" class="headerlink" title="2. 基本数据类型 和 包装类"></a>2. 基本数据类型 和 包装类</h3><ol>
<li>char    和    Character</li>
<li>int      和     Integer</li>
</ol>
<h3 id="3-数字转字符串"><a href="#3-数字转字符串" class="headerlink" title="3. 数字转字符串"></a>3. 数字转字符串</h3><ol>
<li>Integer i2 = Integer.valueof(“10021”);<ul>
<li>将字符串转化为数字</li>
</ul>
</li>
<li>String ss = String.valueOf(number);<ul>
<li>数字转字符串</li>
</ul>
</li>
</ol>
<h4 id="其他三个转换-String-与-Integer-与-int："><a href="#其他三个转换-String-与-Integer-与-int：" class="headerlink" title="其他三个转换 String 与 Integer 与 int："></a>其他三个转换 String 与 Integer 与 int：</h4><ol>
<li>Integer i = Integer.valueOf(ss);<ul>
<li>String 转 Integer</li>
</ul>
</li>
<li>x = i.intValue();<ul>
<li>Integer 转 int</li>
</ul>
</li>
<li>x = Integer.parseInt(x);<ul>
<li>String 直接转 int</li>
</ul>
</li>
</ol>
<ul>
<li>只想得到基本数据类型，parseInt 更方便</li>
</ul>
<h3 id="4-得到字符串中的每个数据方法"><a href="#4-得到字符串中的每个数据方法" class="headerlink" title="4. 得到字符串中的每个数据方法"></a>4. 得到字符串中的每个数据方法</h3><ul>
<li>String[ ] strArray = s.split(“ “);</li>
</ul>
<h3 id="5-基本数据类型与包装类转换-装箱与拆箱"><a href="#5-基本数据类型与包装类转换-装箱与拆箱" class="headerlink" title="5. 基本数据类型与包装类转换 (装箱与拆箱)"></a>5. 基本数据类型与包装类转换 (装箱与拆箱)</h3><h4 id="1-装箱："><a href="#1-装箱：" class="headerlink" title="1.装箱："></a>1.装箱：</h4><ol>
<li>Integer i = Integer.valueOf(100);</li>
<li>Integer i = 100; (自动装箱)</li>
<li>i = i + 200 (自动装箱)</li>
</ol>
<h4 id="2-拆箱"><a href="#2-拆箱" class="headerlink" title="2. 拆箱"></a>2. 拆箱</h4><ol>
<li>i += 200;   （i + 200 自动拆箱）</li>
<li>i = i + 200; （i + 200 自动拆箱）</li>
</ol>
<h3 id="6-注意；"><a href="#6-注意；" class="headerlink" title="6. 注意；"></a>6. 注意；</h3><ol>
<li>在使用包装类类型的时候，如果要操作，最多先判断是否为null。</li>
</ol>
<h4 id="推荐："><a href="#推荐：" class="headerlink" title="推荐："></a>推荐：</h4><ul>
<li>只要是对象，在使用前就必须判断是否为null</li>
</ul>
<h4 id="包装类的使用："><a href="#包装类的使用：" class="headerlink" title="包装类的使用："></a>包装类的使用：</h4><ol>
<li>集合能接收的类型为Object，基本类型是无法添加进去的，还有泛式也必须使用包装类。</li>
<li>包装类型是引用类型，说白了就是一个类</li>
</ol>
<h2 id="6-Date-日期类"><a href="#6-Date-日期类" class="headerlink" title="6. Date 日期类"></a>6. Date 日期类</h2><h3 id="1-Date-定义"><a href="#1-Date-定义" class="headerlink" title="1. Date 定义"></a>1. Date 定义</h3><ul>
<li>Date d = new Date();</li>
</ul>
<h3 id="2-Date-常用方法"><a href="#2-Date-常用方法" class="headerlink" title="2. Date 常用方法"></a>2. Date 常用方法</h3><ol>
<li>System.out.println(d.getTime());<ul>
<li>从1970年1月1日到现在的毫秒值</li>
</ul>
</li>
</ol>
<h3 id="3-表示"><a href="#3-表示" class="headerlink" title="3. 表示"></a>3. 表示</h3><ol>
<li>y 年</li>
<li>M 月</li>
<li>d 日</li>
<li>H 时</li>
<li>m 分</li>
<li>s 秒</li>
</ol>
<h3 id="4-Date-与-String："><a href="#4-Date-与-String：" class="headerlink" title="4. Date 与 String："></a>4. Date 与 String：</h3><h4 id="1-从-date-到-String"><a href="#1-从-date-到-String" class="headerlink" title="1. 从 date 到 String"></a>1. 从 date 到 String</h4><ul>
<li>Date d = new Date();</li>
<li><p>两种构造方法</p>
<ol>
<li>SimpleDateFormat sdf = new SimpleDateFormat();  //  2023/7/3 上午10:50</li>
<li>SimpleDateFormat sdf = new SimpleDateFormat(“yyyy年MM月dd日 HH:mm:ss”); //  2023年07年03日  10:48:47</li>
</ol>
</li>
<li><p>转换：</p>
<ul>
<li>String s = sdf.format(d);  //从data到String   (format())</li>
</ul>
</li>
</ul>
<h4 id="2-从-String-到-date"><a href="#2-从-String-到-date" class="headerlink" title="2. 从 String 到 date"></a>2. 从 String 到 date</h4><ul>
<li>String ss = “2023年07年03日 11:11:11”;</li>
<li><p>SimpleDateFormat sdf2 = new SimpleDateFormat(“yyyy年MM月dd日 HH:mm:ss”);</p>
</li>
<li><p>转换：</p>
<ul>
<li>Date dd = sdf2.parse(ss); // 从 String 到 date   (parse())</li>
</ul>
</li>
</ul>
<h2 id="7-Calendar-常用方法："><a href="#7-Calendar-常用方法：" class="headerlink" title="7. Calendar 常用方法："></a>7. Calendar 常用方法：</h2><h4 id="1-get-例如：返回年-月-日"><a href="#1-get-例如：返回年-月-日" class="headerlink" title="1. get:   例如：返回年 月 日"></a>1. get:   例如：返回年 月 日</h4><ol>
<li>Calendar c = Calendar.getInstance();<ol>
<li>int year = c.get(Calendar.YEAR);</li>
<li>int month = c.get(Calendar.MONTH) + 1;</li>
<li>int date = c.get(Calendar.DATE);</li>
<li>System.out.println(year + “年” + month + “月” + date + “日”);</li>
</ol>
</li>
</ol>
<h4 id="2-add-例如：年份减去3"><a href="#2-add-例如：年份减去3" class="headerlink" title="2. add:   例如：年份减去3"></a>2. add:   例如：年份减去3</h4><ul>
<li>c.add(Calendar.YEAR, -3);</li>
</ul>
<h4 id="3-set-例如：设置2020-12-23-注意：月份从0开始"><a href="#3-set-例如：设置2020-12-23-注意：月份从0开始" class="headerlink" title="3. set:  例如：设置2020.12.23 (注意：月份从0开始)"></a>3. set:  例如：设置2020.12.23 (注意：月份从0开始)</h4><ul>
<li>c.set(2020,11,23);</li>
</ul>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>异常</title>
    <url>/2023/10/29/javase_%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">异常</span>
</div>

<ul>
<li>throws IOException</li>
</ul>
<h2 id="1-异常体系"><a href="#1-异常体系" class="headerlink" title="1. 异常体系"></a>1. 异常体系</h2><h3 id="1-异常体系："><a href="#1-异常体系：" class="headerlink" title="1. 异常体系："></a>1. 异常体系：</h3><ol>
<li>Throwable:<ol>
<li>Error: 严重问题，不需要处理</li>
<li>Exception:<ol>
<li>RuntimeException: (称为运行时异常，其他均为编译时异常) 在编译期是不检查的，出现问题后，需要我们回来改代码</li>
<li>非RuntimeException: 编译期就必须处理的，否则程序不能通过编译，更不能正常运行</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="2-JVM的默认处理方案"><a href="#2-JVM的默认处理方案" class="headerlink" title="2. JVM的默认处理方案"></a>2. JVM的默认处理方案</h2><ul>
<li>如果程序出现了问题，我们没有做任何处理，最终JVM会做默认的处理：<ol>
<li>把异常的名称，异常原因和异常出现的位置等信息输出在了控制台。</li>
<li>程序终止执行。</li>
</ol>
</li>
</ul>
<h2 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3. 异常处理"></a>3. 异常处理</h2><ul>
<li>在JVM的默认处理方案上，不会终止程序，而会继续执行</li>
</ul>
<h3 id="1-格式："><a href="#1-格式：" class="headerlink" title="1. 格式："></a>1. 格式：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>
	可能出现异常的代码<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>
	异常的处理代码<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-例如："><a href="#2-例如：" class="headerlink" title="2. 例如："></a>2. 例如：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回最全面的异常信息 (最常用)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-两种异常"><a href="#4-两种异常" class="headerlink" title="4.两种异常"></a>4.两种异常</h2><ol>
<li>编译时异常：必须显示处理，否则程序就会发生错误，无法通过编译</li>
<li>运行时异常：无需显示处理，也可以和编译时异常一样处理</li>
</ol>
<h2 id="5-处理异常2-throws-异常类名-："><a href="#5-处理异常2-throws-异常类名-：" class="headerlink" title="5. 处理异常2 (throws 异常类名)："></a>5. 处理异常2 (throws 异常类名)：</h2><ul>
<li>throw抛出异常没有处理，不往下执行，try catch往下执行</li>
</ul>
<h4 id="异常处理之throws"><a href="#异常处理之throws" class="headerlink" title="异常处理之throws:"></a>异常处理之throws:</h4><ol>
<li>编译时异常必须要进行处理，两种处理方案：try…catch… 或者 throws。(如果throws来处理，将来谁调用谁处理)</li>
<li>运行时异常可以不处理，出现问题后，需要我们回来改代码</li>
</ol>
<h2 id="6-自定义异常"><a href="#6-自定义异常" class="headerlink" title="6. 自定义异常"></a>6. 自定义异常</h2><h3 id="1-格式：-1"><a href="#1-格式：-1" class="headerlink" title="1. 格式："></a>1. 格式：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 异常类名 <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
	无参构造
	带参构造
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-范例"><a href="#2-范例" class="headerlink" title="2. 范例"></a>2. 范例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScoreException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">ScoreException</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token class-name">ScoreException</span> <span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-throw-和-throws-的区别"><a href="#7-throw-和-throws-的区别" class="headerlink" title="7. throw 和 throws 的区别"></a>7. throw 和 throws 的区别</h2><h4 id="1-throws"><a href="#1-throws" class="headerlink" title="1. throws:"></a>1. throws:</h4><ol>
<li>用在方法名后面，跟的是异常类名</li>
<li>表示抛出异常，由该方法的调用者来处理</li>
<li>表示可以出现异常（不一定出现异常）</li>
</ol>
<h4 id="2-throw"><a href="#2-throw" class="headerlink" title="2. throw:"></a>2. throw:</h4><ol>
<li>用在方法体内，跟的是异常对象名</li>
<li>表示抛出异常，由方法体内的语句处理</li>
<li>一定出现了某种异常</li>
</ol>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象类</title>
    <url>/2023/10/27/javase_%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">抽象类</span>
</div>


<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><ul>
<li>用abstract关键字修饰<ol>
<li>public abstract class 类名 （）</li>
<li>public avstract void 方法名 （)；</li>
</ol>
</li>
</ul>
<h4 id="1-抽象类和抽象方法"><a href="#1-抽象类和抽象方法" class="headerlink" title="1. 抽象类和抽象方法"></a>1. 抽象类和抽象方法</h4><ol>
<li>抽象方法只能在抽象类中</li>
<li>抽象类中可以没有抽象方法</li>
</ol>
<h4 id="2-抽象类"><a href="#2-抽象类" class="headerlink" title="2. 抽象类"></a>2. 抽象类</h4><ol>
<li>抽象类的实例化<ul>
<li>参照多态，通过子类对象实例化。</li>
<li>这叫抽象多态类</li>
</ul>
</li>
<li>抽象类的子类<ul>
<li>要么重写所有抽象类的方法，要么本身就是抽象类</li>
</ul>
</li>
</ol>
<h3 id="2-抽象类成员特点"><a href="#2-抽象类成员特点" class="headerlink" title="2. 抽象类成员特点"></a>2. 抽象类成员特点</h3><h4 id="1-成员变量："><a href="#1-成员变量：" class="headerlink" title="1. 成员变量："></a>1. 成员变量：</h4><ul>
<li>可以是常量，也可以是变量</li>
</ul>
<h4 id="2-构造方法："><a href="#2-构造方法：" class="headerlink" title="2. 构造方法："></a>2. 构造方法：</h4><ol>
<li>有构造方法，但不能实例化</li>
<li>构造方法作用：用于子类访问父类数据的初始化</li>
</ol>
<h4 id="3-成员方法："><a href="#3-成员方法：" class="headerlink" title="3. 成员方法："></a>3. 成员方法：</h4><ol>
<li>可以有抽象方法：用于限制子类必须完成某些动作</li>
<li>可以有非抽象方法：提高代码复用性</li>
</ol>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>接口</title>
    <url>/2023/10/27/javase_%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">接口</span>
</div>


<h2 id="1-基本的概念"><a href="#1-基本的概念" class="headerlink" title="1. 基本的概念"></a>1. 基本的概念</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><ul>
<li>public class 类名 implements  接口名</li>
</ul>
<h3 id="2-概念"><a href="#2-概念" class="headerlink" title="2. 概念"></a>2. 概念</h3><ol>
<li>接口也是抽象内容</li>
<li>引用，用多态思想</li>
</ol>
<h3 id="3-接口默认修饰"><a href="#3-接口默认修饰" class="headerlink" title="3. 接口默认修饰"></a>3. 接口默认修饰</h3><ol>
<li>接口中成员变量默认被final修饰</li>
<li>默认修饰是  public static final int a 1; 等价于 int a = 1;</li>
<li>接口里的方法默认带有  public abstract</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>接口没有构造方法，主要是对行为进行抽象</li>
</ul>
<h2 id="类与接口的关系（区别）"><a href="#类与接口的关系（区别）" class="headerlink" title="类与接口的关系（区别）"></a>类与接口的关系（区别）</h2><ol>
<li>类与类的关系：<ul>
<li>继承关系，只能单继承，但是可以  多层  继承</li>
</ul>
</li>
<li>类与接口的关系：<ul>
<li>实现关系，可以单实现，也可以多实现，还可以继承一个类的同时实现多个接口</li>
</ul>
</li>
<li>接口和接口的关系：<ul>
<li>继承关系，可以单继承，也可以多继承</li>
</ul>
</li>
</ol>
<h3 id="抽象类与接口的区别"><a href="#抽象类与接口的区别" class="headerlink" title="抽象类与接口的区别"></a>抽象类与接口的区别</h3><h4 id="1-成员区别："><a href="#1-成员区别：" class="headerlink" title="1. 成员区别："></a>1. 成员区别：</h4><ol>
<li>抽象类<ol>
<li>常量，变量</li>
<li>有构造方法</li>
<li>有抽象方法，也有非抽象方法</li>
</ol>
</li>
<li>接口<ol>
<li>常量</li>
<li>由抽象方法</li>
</ol>
</li>
</ol>
<h4 id="2-关系区别："><a href="#2-关系区别：" class="headerlink" title="2. 关系区别："></a>2. 关系区别：</h4><ol>
<li>类与类：<ul>
<li>继承：单继承</li>
</ul>
</li>
<li>抽象类：<ul>
<li>实现：可以单实现，也可以多实现</li>
</ul>
</li>
<li>接口与接口：<ul>
<li>继承：单继承，多继承</li>
</ul>
</li>
</ol>
<h4 id="3-设计理念区别："><a href="#3-设计理念区别：" class="headerlink" title="3. 设计理念区别："></a>3. 设计理念区别：</h4><ol>
<li>抽象类：对类抽象，包括属性，行为</li>
<li>接口：   对行为抽象，主要是行为</li>
<li>总结：    抽象类对事物的抽象，而接口是对行为的抽象。</li>
</ol>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>杂</title>
    <url>/2023/10/20/javase_%E6%9D%82/</url>
    <content><![CDATA[<div align = 'center' >
    <font size = '8' color='orange'>
        杂
    </font>
</div>

<h5 id="JDK-gt-JRE-gt-JVM"><a href="#JDK-gt-JRE-gt-JVM" class="headerlink" title="JDK -&gt; JRE -&gt; JVM"></a>JDK -&gt; JRE -&gt; JVM</h5><h5 id="开发工具-gt-核心类库"><a href="#开发工具-gt-核心类库" class="headerlink" title="开发工具 -&gt; 核心类库"></a>开发工具 -&gt; 核心类库</h5><h3 id="不同表达："><a href="#不同表达：" class="headerlink" title="不同表达："></a>不同表达：</h3><ul>
<li>类：大驼峰（首字母全部大写）</li>
<li>方法变量 ：小驼峰 （第一个单词首字母小写，之后首字母大写）</li>
</ul>
<h3 id="拓展运算"><a href="#拓展运算" class="headerlink" title="拓展运算"></a>拓展运算</h3><ul>
<li>拓展的运算符隐含了类型的强制转换</li>
</ul>
<h3 id="逻辑符号"><a href="#逻辑符号" class="headerlink" title="逻辑符号"></a>逻辑符号</h3><ul>
<li><p>^ 逻辑异或 （相同为0，不同为1）</p>
</li>
<li><p>&amp;&amp; || 短路运算符判断能结束时，就不往下判断</p>
</li>
<li>&amp; | 判断到底</li>
</ul>
<h3 id="分支和循环语句"><a href="#分支和循环语句" class="headerlink" title="分支和循环语句"></a>分支和循环语句</h3><ul>
<li>分支语句包括 if 和 switch</li>
<li>循环语句包括 for 和 while 和 do-while</li>
</ul>
<h3 id="输入流程"><a href="#输入流程" class="headerlink" title="输入流程"></a>输入流程</h3><ul>
<li><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><ul>
<li><h5 id="输出随机数"><a href="#输出随机数" class="headerlink" title="输出随机数"></a>输出随机数</h5></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>unil<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 包括0，不包括10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2023/10/27/javase_%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>继承</font>
</div>

<h3 id="1-继承概念"><a href="#1-继承概念" class="headerlink" title="1. 继承概念"></a>1. 继承概念</h3><ul>
<li>父类，也被称为基类，超类。</li>
<li>子类，也被称为派生类</li>
</ul>
<h3 id="2-定义"><a href="#2-定义" class="headerlink" title="2. 定义"></a>2. 定义</h3><ul>
<li>public  class  子类名  extends  父类名（）{ }</li>
</ul>
<h3 id="3-继承优点"><a href="#3-继承优点" class="headerlink" title="3. 继承优点"></a>3. 继承优点</h3><ol>
<li>提高代码复用性</li>
<li>提高代码维护性</li>
</ol>
<h3 id="4-继承缺点"><a href="#4-继承缺点" class="headerlink" title="4. 继承缺点"></a>4. 继承缺点</h3><ol>
<li>类的耦合性增加了，当父类发生变化时子类也不得不跟着变化，削弱了子类的独立性。</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><ol>
<li>super.父类(直接访问父类的变量)</li>
<li>this代表本类引用</li>
</ol>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><ol>
<li>每一个子类构造方法的第一条默认语句是super（），会先访问父类   也就是父类中最好写一个无参构造方法</li>
<li>方法先子后父</li>
</ol>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><ol>
<li>方法重写：子类中出现了和父类一模一样的方法</li>
<li>Override  一个注释，检查重写方法  用于表明该方法是覆写（或重写）父类中的同名方法。</li>
</ol>
<h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><ol>
<li>父类中私有的方法子类不能继承，子类的访问权限不低于父类    public &gt; 默认  &gt;  private</li>
</ol>
<h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><ol>
<li>java支持单继承，不继承多继承</li>
<li>java支持多层继承（套娃）</li>
</ol>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>集合基础</title>
    <url>/2023/10/20/javase_%E9%9B%86%E5%90%88%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>集合基础</font>
</div>


<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span> <span class="token comment">// 导包</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义</span>
s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"dfsd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"dsds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加（下标0开始）</span>
<span class="token function">remove</span><span class="token punctuation">(</span>boject o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除索引元素，返回是否成功</span>
<span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除指定索引处元素，返回被删除元素</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> object o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改索引处元素，返回被修改的元素(修改前)</span>
<span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回指定位置的元素</span>
<span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回集合中元素个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    </p>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>集合进阶</title>
    <url>/2023/10/31/javase_%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">集合进阶</span>
</div>

<h2 id="0-1-概要"><a href="#0-1-概要" class="headerlink" title="0.1 概要"></a>0.1 概要</h2><h4 id="1-Collection-单列"><a href="#1-Collection-单列" class="headerlink" title="1. Collection (单列):"></a>1. Collection (单列):</h4><ul>
<li>List (可重复): ArrayList,  LinkedList</li>
<li>Set (不可重复): HashSet, TreeSet</li>
</ul>
<h4 id="2-Map-双列"><a href="#2-Map-双列" class="headerlink" title="2. Map (双列)"></a>2. Map (双列)</h4><ul>
<li>HashMap</li>
</ul>
<h4 id="3-Tips-其他方面"><a href="#3-Tips-其他方面" class="headerlink" title="3. Tips (其他方面)"></a>3. Tips (其他方面)</h4><ol>
<li>Collection, Map, List, Set 等为接口</li>
<li>ArrayList, LinkedList, HashSet, TreeSet, HashMap 等位实现类</li>
</ol>
<ul>
<li>技巧：Ctrl + Alt + v 快速生成</li>
</ul>
<h2 id="1-Collection"><a href="#1-Collection" class="headerlink" title="1. Collection :"></a>1. Collection :</h2><h3 id="1-Collection-集合常用方法："><a href="#1-Collection-集合常用方法：" class="headerlink" title="1. Collection 集合常用方法："></a>1. Collection 集合常用方法：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span>  <span class="token comment">//添加元素</span>
<span class="token number">2.</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>  <span class="token comment">//从集合中移除指定元素</span>
<span class="token number">3.</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//清空结合中所有元素</span>
<span class="token number">4.</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>  <span class="token comment">//判断集合中是否存在指定元素</span>
<span class="token number">5.</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//判断集合是否为空</span>
<span class="token number">6.</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//集合的长度，也就是集合中元素的个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-Collection-集合的便利："><a href="#2-Collection-集合的便利：" class="headerlink" title="2. Collection 集合的便利："></a>2. Collection 集合的便利：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Interator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> i <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">interator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-List"><a href="#2-List" class="headerlink" title="2. List :"></a>2. List :</h2><h3 id="1-List-集合常用方法"><a href="#1-List-集合常用方法" class="headerlink" title="1. List 集合常用方法 :"></a>1. List 集合常用方法 :</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">void</span> add <span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span>  <span class="token comment">//添加元素</span>
<span class="token number">2.</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>  <span class="token comment">//删除指定索引处元素</span>
<span class="token number">3.</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span>  <span class="token comment">//修改索引处的元素，返回被修改的元素(被修改前的元素)</span>
<span class="token number">4.</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>  <span class="token comment">//返回指定位置的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h3><ol>
<li>ArrayList 底层是数组 (查询快，增删慢)</li>
<li>LinkedList 底层是链表 (查询慢，增删快)</li>
</ol>
<h3 id="3-LinkedList"><a href="#3-LinkedList" class="headerlink" title="3. LinkedList :"></a>3. LinkedList :</h3><h4 id="LinkedList集合的特有功能"><a href="#LinkedList集合的特有功能" class="headerlink" title="LinkedList集合的特有功能:"></a>LinkedList集合的特有功能:</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span>  <span class="token comment">//头插元素</span>
<span class="token number">2.</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span>  <span class="token comment">//尾插元素</span>
<span class="token number">3.</span> <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//返回列表第一个元素</span>
<span class="token number">4.</span> <span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//返回列表最后一个元素</span>
<span class="token number">5.</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//删除列表第一个元素</span>
<span class="token number">6.</span> <span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//删除列表中最后一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h3><ol>
<li>List 的并发异常修改</li>
<li>[10, 233, 3223]  (集合输出格式)</li>
</ol>
<h2 id="3-Set"><a href="#3-Set" class="headerlink" title="3. Set:"></a>3. Set:</h2><h3 id="1-特点："><a href="#1-特点：" class="headerlink" title="1. 特点："></a>1. 特点：</h3><ol>
<li>无重复元素</li>
<li>没有带索引的方法，所以不能使用普通的for循环</li>
</ol>
<h3 id="2-HashSet-集合特点："><a href="#2-HashSet-集合特点：" class="headerlink" title="2. HashSet 集合特点："></a>2. HashSet 集合特点：</h3><ol>
<li>底层数据结构是哈希表</li>
<li>对集合的迭代顺序不做保证，不保证存储和去取出的元素顺序一样</li>
<li>没有带索引的方法，所以不能使用普通的 for 循环便利</li>
<li>由于是 Set 集合，所以不包含重复元素</li>
</ol>
<h3 id="3-HashSet-存储元素："><a href="#3-HashSet-存储元素：" class="headerlink" title="3. HashSet 存储元素："></a>3. HashSet 存储元素：</h3><ul>
<li>要保证元素唯一性，需要重写 hashCode() 和 equals()</li>
</ul>
<h3 id="4-LinkedHashSet-集合特点："><a href="#4-LinkedHashSet-集合特点：" class="headerlink" title="4. LinkedHashSet 集合特点："></a>4. LinkedHashSet 集合特点：</h3><ol>
<li>哈希表和链表实现的 Set 接口，具有可以测的迭代次序</li>
<li>由链表保证元素有序，也就是存储和取出顺序一样</li>
<li>由哈希表保证元素唯一，也就是没有重复的元素</li>
</ol>
<h3 id="5-TreeSet-集合特点："><a href="#5-TreeSet-集合特点：" class="headerlink" title="5. TreeSet 集合特点："></a>5. TreeSet 集合特点：</h3><ol>
<li>元素有序 (按照构造方法排序)<ul>
<li>TreeSet(): 根据元素的自然顺序进行排序</li>
<li>TreeSet(Comparator&lt;?&gt;  Comparator) : 根据指定的比较器进行排序</li>
</ul>
</li>
<li>没有带索引的方法，不能使用普通 for 循环遍历</li>
<li>由于是 Set 集合，所以不包含重复元素</li>
<li>（用 int 类型的包装类型Integer，因为是集合）</li>
</ol>
<h2 id="4-其他-1"><a href="#4-其他-1" class="headerlink" title="4. 其他"></a>4. 其他</h2><h3 id="1-哈希值"><a href="#1-哈希值" class="headerlink" title="1. 哈希值"></a>1. 哈希值</h3><ul>
<li>默认情况下，不同对象的哈希值不同。</li>
<li>而重写hashCode(), 可以使哈希值相同</li>
</ul>
<h3 id="2-自然排序Comparable"><a href="#2-自然排序Comparable" class="headerlink" title="2.自然排序Comparable"></a>2.自然排序Comparable</h3><ul>
<li>自然排序，就是让元素所属的类实现 Comparable 接口，重写ComparableTo(T O) 方法</li>
<li>接口：implements Comparable<String> (记得后面接收遍历名), 重写CompareTo(T O) 方法</li>
</ul>
<h3 id="3-比较器的使用"><a href="#3-比较器的使用" class="headerlink" title="3. 比较器的使用"></a>3. 比较器的使用</h3><ul>
<li>用 Tree 集合存储自定义对象，带参构造方法使用的是比较器排序对元素进行排序。</li>
<li>比较器排序，就是让集合构造方法结构 Comparator 实现类对象，重写 Comparable (T O1, T O2)方法</li>
</ul>
<h2 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5. 泛型"></a>5. 泛型</h2><h3 id="1-泛型定义格式"><a href="#1-泛型定义格式" class="headerlink" title="1. 泛型定义格式"></a>1. 泛型定义格式</h3><ol>
<li>&lt;类型&gt;: 指定一种类型的格式。这里的类型可以看成形参。</li>
<li>&lt;类型1，类型2 … &gt; 指定多种类型的形式。这里的类型可以看作形参。</li>
</ol>
<h3 id="2-泛型的好处"><a href="#2-泛型的好处" class="headerlink" title="2. 泛型的好处"></a>2. 泛型的好处</h3><ol>
<li>把运行期间的问题提前到了编译期。</li>
<li>避免了强制类型转换。</li>
</ol>
<h3 id="3-泛型类定义格式："><a href="#3-泛型类定义格式：" class="headerlink" title="3. 泛型类定义格式："></a>3. 泛型类定义格式：</h3><ol>
<li>修饰符 class 类名&lt;类型&gt; { }</li>
<li>public class Generic<T> { }</li>
</ol>
<h3 id="4-泛型方法"><a href="#4-泛型方法" class="headerlink" title="4. 泛型方法"></a>4. 泛型方法</h3><ol>
<li><p>格式：修饰符&lt;类型&gt;  返回值类型  方法名(类型 变量名) { }</p>
</li>
<li><p>范例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="5-泛型接口："><a href="#5-泛型接口：" class="headerlink" title="5. 泛型接口："></a>5. 泛型接口：</h3><ol>
<li><p>格式：修饰符  interface  接口名&lt;类型&gt; { }</p>
</li>
<li><p>范例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="6-类型通配符"><a href="#6-类型通配符" class="headerlink" title="6. 类型通配符"></a>6. 类型通配符</h3><ol>
<li><p>类型通配符 &lt;?&gt;</p>
<ul>
<li><p>例如: </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>类型通配符上限：&lt;? extends 类型&gt;</p>
</li>
<li>类型通配符下限：&lt;? super 类型&gt;</li>
</ol>
<h3 id="7-可变参数"><a href="#7-可变参数" class="headerlink" title="7. 可变参数"></a>7. 可变参数</h3><ul>
<li>又称为参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的</li>
</ul>
<ol>
<li><p>格式：修饰符  返回值类型  方法名 (数据类型…变量名) { }</p>
</li>
<li><p>范例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> sum <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">//实际传递的是数组，需要迭代求和</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>实际例子</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> sum_1 <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> sum <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//实际传递的是数组</span>
		<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> sum<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-Map"><a href="#6-Map" class="headerlink" title="6. Map :"></a>6. Map :</h2><h3 id="1-特点：-1"><a href="#1-特点：-1" class="headerlink" title="1. 特点："></a>1. 特点：</h3><ul>
<li>多态的方式创建 Map 对象</li>
</ul>
<h3 id="2-Map-集合的基本功能："><a href="#2-Map-集合的基本功能：" class="headerlink" title="2. Map 集合的基本功能："></a>2. Map 集合的基本功能：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">V</span> put <span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span>  <span class="token comment">//添加元素</span>
<span class="token number">2.</span> <span class="token class-name">V</span> remove <span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>  <span class="token comment">//根据键删除元素</span>
<span class="token number">3.</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//清空</span>
<span class="token number">4.</span> <span class="token keyword">boolean</span> <span class="token function">containKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>  <span class="token comment">//判断集合是否包含指定的键</span>
<span class="token number">5.</span> <span class="token keyword">boolean</span> <span class="token function">containValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span>  <span class="token comment">//判断集合是否包含指定的值</span>
<span class="token number">6.</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//判断集合是否为空</span>
<span class="token number">7.</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//返回集合长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-Map集合的获取功能："><a href="#3-Map集合的获取功能：" class="headerlink" title="3. Map集合的获取功能："></a>3. Map集合的获取功能：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>  <span class="token comment">//根据键获取值</span>
<span class="token number">2.</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取所有键的值</span>
<span class="token number">3.</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取所有值的集合</span>
<span class="token number">4.</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Enter</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取所有键值对对象的集合 —— 获取所有键值对对象的集合后，可以用 getKey() 和 getValue() 的方法来获取键和值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-注意："><a href="#4-注意：" class="headerlink" title="4. 注意："></a>4. 注意：</h3><ul>
<li>重写两个方法来保证键的唯一性：hashCode() 和 equals()</li>
</ul>
<h3 id="5-TreeMap-参考TreeSet"><a href="#5-TreeMap-参考TreeSet" class="headerlink" title="5. TreeMap: 参考TreeSet"></a>5. TreeMap: 参考TreeSet</h3><ul>
<li>默认按照键排序</li>
</ul>
<h2 id="7-Collections"><a href="#7-Collections" class="headerlink" title="7. Collections:"></a>7. Collections:</h2><h3 id="1-Collections-概述："><a href="#1-Collections-概述：" class="headerlink" title="1. Collections 概述："></a>1. Collections 概述：</h3><ul>
<li>是针对集合操作的工具类</li>
</ul>
<h3 id="2-Collections-类的常用方法："><a href="#2-Collections-类的常用方法：" class="headerlink" title="2. Collections 类的常用方法："></a>2. Collections 类的常用方法：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span> <span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token keyword">void</span> sort <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token comment">//升序排序</span>
<span class="token number">2.</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span>  <span class="token comment">//反转指定列表的元素 (单纯反转)</span>
<span class="token number">3.</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span>  <span class="token comment">//使用默认的随机源随机排序列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象基础</title>
    <url>/2023/10/20/javase_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>面向对象基础</font>
</div>


<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><ul>
<li>类的重要性：类是java程序组成基本单位</li>
<li>类的组成：属性和行为</li>
</ul>
<h3 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h3><ul>
<li><h4 id="成员变量："><a href="#成员变量：" class="headerlink" title="成员变量："></a>成员变量：</h4><ul>
<li>堆内存：随着对象的存在而存在，随着对象的消失而消失</li>
<li>有默认的初始值</li>
</ul>
</li>
<li><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><ul>
<li>栈内存：随着方法的调用而存在，随着方法的消失而消失</li>
<li>没有默认的初始值，必须先定义</li>
</ul>
</li>
</ul>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul>
<li>prinate的使用 getxxx(), setxxx();</li>
<li>this的使用 (成员变量与局部变量冲突)</li>
</ul>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul>
<li>系统默认无参构造方法</li>
<li>可以定义不同的构造方法</li>
</ul>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>EL表达式</title>
    <url>/2023/11/03/javaweb_EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">EL表达式</span>
</div>


<h3 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h3><ul>
<li>Expression Language 表达式语言</li>
</ul>
<h3 id="2-作用："><a href="#2-作用：" class="headerlink" title="2. 作用："></a>2. 作用：</h3><ul>
<li>替换和简化 jsp 页面中Java代码的编写</li>
</ul>
<h3 id="3-语法："><a href="#3-语法：" class="headerlink" title="3. 语法："></a>3. 语法：</h3><ul>
<li>${表达式}</li>
</ul>
<h3 id="4-注意："><a href="#4-注意：" class="headerlink" title="4. 注意："></a>4. 注意：</h3><ul>
<li>jsp 默认支持el 表达式。如果要忽略el 表达式：<ol>
<li>设置 jsp 中 page 指令中：isELIgnored = “true” 忽略当前 jsp 页面中所有的 el 表达式</li>
<li>\ ${表达式}：忽略当前这个 el 表达式</li>
</ol>
</li>
</ul>
<h3 id="5-使用"><a href="#5-使用" class="headerlink" title="5. 使用"></a>5. 使用</h3><h4 id="1-运算"><a href="#1-运算" class="headerlink" title="1. 运算"></a>1. 运算</h4><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><ol>
<li>算数运算符：+ - * / (div) %(mod)</li>
<li>比较运算符：&gt; &lt; &gt;= &lt;= == != </li>
<li>逻辑运算符：&amp;&amp;(and)  ||(or)  !(not)</li>
<li>空运算符：empty<ul>
<li>功能：用于判断字符串、集合、数组对象是否为 null 或者 长度是否为0</li>
<li>${empty list}：判断字符串、集合、数组对象是否为 null 并且 长度 &gt;0</li>
<li>${not empty str}：表示判断字符串、集合、数组对象是否不为 null 并且 长度 &gt; 0</li>
</ul>
</li>
</ol>
<h4 id="2-获取值"><a href="#2-获取值" class="headerlink" title="2. 获取值"></a>2. 获取值</h4><h5 id="1-el-表达式只能从域对象中获取值"><a href="#1-el-表达式只能从域对象中获取值" class="headerlink" title="1.el 表达式只能从域对象中获取值"></a>1.el 表达式只能从域对象中获取值</h5><h5 id="2-语法："><a href="#2-语法：" class="headerlink" title="2. 语法："></a>2. 语法：</h5><ol>
<li>${域名称.键名}: 从指定域中获取指定键的值<ul>
<li>域名称：<ol>
<li>pageScope              —&gt; pageContext</li>
<li>requestScope          —&gt; request</li>
<li>sessionScope          —&gt; session</li>
<li>applicationScope     —&gt; application (ServletContext)</li>
</ol>
</li>
<li>举例：在request 域中存储了name=张三</li>
<li>获取：${requestScope.name}</li>
</ul>
</li>
<li>${键名}: 表示依次从最小的域中查找是否有该键对应的值，知道找到为止</li>
<li>获取对象、List集合、Map集合的值<ol>
<li>对象：${域名称.键名.属性名}<ul>
<li>本质上会去调用对象的 getter 方法</li>
</ul>
</li>
<li>List 集合：${域名称.键名[索引]}</li>
<li>Map集合：<ul>
<li>${域名称.键名.key名称}</li>
<li>${域名称.键名.[“key名称”]}</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="3-隐式对象："><a href="#3-隐式对象：" class="headerlink" title="3. 隐式对象："></a>3. 隐式对象：</h4><ul>
<li>el 表达式中有11个隐式对象</li>
<li>pageContext：<ul>
<li>获取 jsp 其他八个内置对象<ul>
<li>${pageContext.request.contextPath}：动态获取虚拟目录</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2023/10/24/javaweb_HTTP/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>HTTP</font>
</div>


<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Hyper Text Transfer Protocol 超文本传输协议</p>
<h4 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h4><p>定义了，客户端和服务器端通信时，发送数据的格式</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol>
<li>基于TCP / IP的高级协议</li>
<li>默认端口号：80</li>
<li>无状态的：每次请求之间相互独立，不能交互数据</li>
</ol>
<h4 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h4><ul>
<li>1.0：每一次请求响应都会建立新的连接</li>
<li>1.1：复用连接</li>
</ul>
<h3 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h3><ul>
<li>客户端发送给服务器端的数据</li>
</ul>
<h4 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h4><p> 请求方式  请求url  请求协议 / 版本</p>
<p>GET  /  login.html  HTTP / 1.1</p>
<ul>
<li>请求方式<ul>
<li>HTTP协议有7种请求方式，常用的有2种<ul>
<li>GET<ol>
<li>请求参数在请求行中，在url后</li>
<li>请求的url长度有限制</li>
<li>不太安全</li>
</ol>
</li>
<li>POST<ol>
<li>请求参数在请求体中</li>
<li>请求的url长度没有限制</li>
<li>相对安全</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-请求头"><a href="#2-请求头" class="headerlink" title="2. 请求头"></a>2. 请求头</h4><h5 id="常见的请求头"><a href="#常见的请求头" class="headerlink" title="常见的请求头"></a>常见的请求头</h5><ol>
<li><p>User-Agent ：浏览器告诉服务器，我访问你使用的服务器版本信息</p>
<ul>
<li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li>
</ul>
</li>
<li><p>Referer：<a href="http://localhost/login.html">http://localhost/login.html</a></p>
<ul>
<li>告诉服务器，当前请求从哪里来<ul>
<li>作用<ol>
<li>防盗链</li>
<li>统计工作</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="3-请求空行"><a href="#3-请求空行" class="headerlink" title="3. 请求空行"></a>3. 请求空行</h4><ul>
<li>空行，就是用于分割POST请求的请求头，和请求体</li>
</ul>
<h4 id="4-请求体-正文"><a href="#4-请求体-正文" class="headerlink" title="4. 请求体(正文)"></a>4. 请求体(正文)</h4><ul>
<li>封装POST请求消息的请求参数</li>
</ul>
<h3 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h3><ul>
<li>服务器端发送给客户端的数据</li>
</ul>
<h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><h4 id="1-响应行"><a href="#1-响应行" class="headerlink" title="1. 响应行"></a>1. 响应行</h4><h5 id="1-组成："><a href="#1-组成：" class="headerlink" title="1. 组成："></a>1. 组成：</h5><ul>
<li>协议 / 版本  响应状态码  状态码描述</li>
</ul>
<h5 id="2-响应状态码"><a href="#2-响应状态码" class="headerlink" title="2. 响应状态码"></a>2. 响应状态码</h5><ul>
<li>服务器告诉客户端浏览器本次请求和响应的一个状态。</li>
</ul>
<ol>
<li>状态码都是3位数字</li>
<li>分类：<ol>
<li>1xx：服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1xx状态码</li>
<li>2xx：成功。代表：200</li>
<li>3xx：重定向。代表：302（重定向），304（访问缓存）</li>
<li>4xx：客户端错误。<ul>
<li>代表：<ul>
<li>404：请求路径没有对应的资源</li>
<li>405：请求方式没有对应的doXxx方法</li>
</ul>
</li>
</ul>
</li>
<li>5xx：服务器端错误。代表：500（服务器内部出现异常）</li>
</ol>
</li>
</ol>
<h4 id="2-响应头"><a href="#2-响应头" class="headerlink" title="2.响应头"></a>2.响应头</h4><h5 id="1-格式"><a href="#1-格式" class="headerlink" title="1. 格式"></a>1. 格式</h5><ul>
<li>头名称：值</li>
</ul>
<h5 id="2-常见的响应头"><a href="#2-常见的响应头" class="headerlink" title="2. 常见的响应头"></a>2. 常见的响应头</h5><ol>
<li>Content - Type：服务器告诉客户端本次响应体数据格式以及编码格式</li>
<li>Content - disposition：服务器告诉客户端以什么格式打开响应体数据<ul>
<li>值：<ul>
<li>in - line：默认值，在当前页面内打开</li>
<li>attachment；filename=xxx：以附件形式打开响应体。文件下载</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="3-响应空行"><a href="#3-响应空行" class="headerlink" title="3. 响应空行"></a>3. 响应空行</h4><h4 id="4-响应体"><a href="#4-响应体" class="headerlink" title="4. 响应体"></a>4. 响应体</h4><ul>
<li>传输的数据</li>
</ul>
<h3 id="响应字符串格式"><a href="#响应字符串格式" class="headerlink" title="响应字符串格式"></a>响应字符串格式</h3><p>HTTP / 2.0  200  OK （响应行）</p>
<p>Content - Type：text / html ; charset = UTF - 8 （响应头）</p>
<p>Content - Length：101</p>
<p>Date：Wed，06 Jun 2018 07:08:42  GMT  （响应头）</p>
<p>（响应空行）</p>
<html> （响应体）

    <head>
        <title>$Title$</title>
    </head>

<body>

hello , reponse

</body>

</html>

















]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP</title>
    <url>/2023/11/03/javaweb_JSP/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">JSP:入门学习</span>
</div>

<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul>
<li>Java Server Pages: java服务器端页面<ul>
<li>可以理解为：一个特殊的页面，其中既可以指定定义 html 标签，又可以定义 java 代码</li>
<li>用于简化书写</li>
</ul>
</li>
</ul>
<h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><ul>
<li>JSP 本质就是一个Servlet</li>
</ul>
<h3 id="3-JSP-的脚本：JSP定义Java代码的方式"><a href="#3-JSP-的脚本：JSP定义Java代码的方式" class="headerlink" title="3. JSP 的脚本：JSP定义Java代码的方式"></a>3. JSP 的脚本：JSP定义Java代码的方式</h3><ol>
<li><p>&lt;%    代码 %&gt;: 定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</p>
</li>
<li><p>&lt;%!   代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。</p>
</li>
<li><p>&lt;%=  代码 %&gt;：定义的Java代码，会输出到页面上。输出语句中可以定义什么，该脚本就可以定义什么。</p>
</li>
</ol>
<h3 id="4-JSP-的内置对象"><a href="#4-JSP-的内置对象" class="headerlink" title="4. JSP 的内置对象"></a>4. JSP 的内置对象</h3><ul>
<li>在jsp 页面中不需要获取和创建，可以直接使用的对象</li>
<li>jsp 一共有9个内置对象</li>
<li>先学习3个<ul>
<li>request</li>
<li>response</li>
<li>out: 字符流输出对象。可以将数据输出到页面上。和response.getWriter() 类似<ul>
<li>response.getWritet() 和 out.write() 的区别：<ul>
<li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</li>
<li>response.getWriter() 数据输出永远在out.write() 之前</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div align='center'>
    <span style="font-size:45px; color:pink">JSP</span>
</div>


<h3 id="1-指令"><a href="#1-指令" class="headerlink" title="1. 指令"></a>1. 指令</h3><ul>
<li>作用：用于配置JSP页面，导入资源文件</li>
<li>格式：<ul>
<li>&lt;%@ 指令名称 属性名1=属性值1  属性名2 = 属性值2 . . .%&gt;</li>
</ul>
</li>
<li>分类<ol>
<li>page         : 配置JSP页面的<ul>
<li>contentType: 等同于response.setContentType()<ol>
<li>设置响应体的mime类型以及字符型</li>
<li>设置当前 jsp 页面的编码 (只能是高级的IDE才生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集)</li>
</ol>
</li>
<li>import: 导包</li>
<li>errorPage: 当前页面发生异常后，会自动跳转到指定的错误页面</li>
<li>isErrorPage: 表示当前页面是否是错误页面<ul>
<li>true: 是，可以使用内置对象exception</li>
<li>false: 否，默认值。不可以使用内置对象exception</li>
</ul>
</li>
</ul>
</li>
<li>include     : 页面包含的。导入页面的资源文件<ul>
<li>&lt;%@include file=”top.jsp”%&gt;</li>
</ul>
</li>
<li>taglib        : 导入资源<ul>
<li></li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h3><ol>
<li>html 注释：<ul>
<li>&lt;! — —&gt;: 只能注释html 代码片段</li>
</ul>
</li>
<li>jsp 注释：推荐使用<ul>
<li>&lt;%— —%&gt; : 可以注释所有</li>
</ul>
</li>
</ol>
<h3 id="3-内置对象"><a href="#3-内置对象" class="headerlink" title="3. 内置对象"></a>3. 内置对象</h3><ul>
<li>在jsp 页面中不需要创建，直接使用的对象</li>
<li>一共有9个：变量名 和 真实类型 和 作用<ul>
<li>pageContext         PageContext                    当前页面共享数据，还可以获取其他八个内置对象</li>
<li>request                 HttpServletRequest          一次请求访问多个资源（转发）</li>
<li>session                 HttpSession                     一次会话的多个请求见</li>
<li>application            ServletContext                 所有用户间共享数据</li>
<li>response              HttpServletResponse       响应对象</li>
<li>page                     Object                              当前页面（Servlet）的对象  this</li>
<li>out                        JspWriter                         输出对象，数据输出到页面上</li>
<li>config                   ServletConfig                   Servlet 的配置对象</li>
<li>exception             Throwable                        异常对象</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JSTL</title>
    <url>/2023/11/05/javaweb_JSTL/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">JSTL</span>
</div>

<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p><strong>JavaServer Pages Tag Library   JSP标准标签库</strong></p>
<ul>
<li>是由Apache组织提供的免费的开源的免费的 jsp 标签</li>
</ul>
<h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h3><ul>
<li><strong>用于简化和替换 jsp 页面上的  java 代码</strong></li>
</ul>
<h3 id="3-使用步骤"><a href="#3-使用步骤" class="headerlink" title="3. 使用步骤"></a>3. 使用步骤</h3><ol>
<li><strong>导入 jstl 相关 jar 包</strong></li>
<li><strong>引入标签库：taglib 指令：&lt;%@ taglib %&gt;</strong></li>
<li><strong>使用标签</strong></li>
</ol>
<h3 id="4-常用的-JSTL-标签"><a href="#4-常用的-JSTL-标签" class="headerlink" title="4. 常用的 JSTL 标签"></a>4. 常用的 JSTL 标签</h3><ol>
<li><strong>if</strong> ：相当于java中的 if<ol>
<li>属性：<ul>
<li>test 必需属性，接收 boolean 表达式<ul>
<li>如果表达式为 true, 则显示 if 标签体内容，如果为 false，则不显示标签体内容</li>
<li>一般情况下，test 属性值会结合 el 表达式一起使用</li>
</ul>
</li>
</ul>
</li>
<li>注意：<ul>
<li>c : if 标签没有 else 情况，想要 else 情况，则可以再定义一个 c : if 标签</li>
</ul>
</li>
</ol>
</li>
<li><strong>choose</strong>：相当于java中的 switch<ol>
<li>使用 choose 标签声明                                 相当于 switch 声明</li>
<li>使用 when 标签判断                                    相当于 case </li>
<li>使用 otherwise 标签做其他情况的声明        相当于default</li>
</ol>
</li>
<li><strong>foreach</strong>：相当于java中的 for</li>
</ol>
<h3 id="5-练习："><a href="#5-练习：" class="headerlink" title="5. 练习："></a>5. 练习：</h3><p><strong>需求：在 request 域中有一个存有 User 对象的 List 集合。需要使用 jstl + el 将 list 集合数据展示到 jsp 页面的表格 table 中</strong></p>
<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page import&#x3D;&quot;java.sql.Array&quot; %&gt;
&lt;%@ page import&#x3D;&quot;java.util.ArrayList&quot; %&gt;
&lt;%@ page import&#x3D;&quot;java.util.List&quot; %&gt;
&lt;%@ page import&#x3D;&quot;Domian.User&quot; %&gt;
&lt;%@ page import&#x3D;&quot;java.util.Date&quot; %&gt;

&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;
&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;test&lt;&#x2F;title&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;

 &lt;%
     List list &#x3D; new ArrayList();
     list.add(new User(&quot;张三&quot;, 23, new Date()));
     list.add(new User(&quot;李四&quot;, 25, new Date()));
     list.add(new User(&quot;王五&quot;, 26, new Date()));
     request.setAttribute(&quot;list&quot;, list);
 %&gt;

&lt;table border&#x3D;&quot;1&quot;, width&#x3D;&quot;500&quot;, align&#x3D;&quot;center&quot;&gt;
     &lt;tr&gt;
         &lt;th&gt;编号&lt;&#x2F;th&gt;
         &lt;th&gt;姓名&lt;&#x2F;th&gt;
         &lt;th&gt;年龄&lt;&#x2F;th&gt;
         &lt;th&gt;生日&lt;&#x2F;th&gt;
     &lt;&#x2F;tr&gt;
     &lt;%--数据行--%&gt;

     &lt;c:forEach items&#x3D;&quot;$&#123;list&#125;&quot; var&#x3D;&quot;user&quot; varStatus&#x3D;&quot;s&quot;&gt;

         &lt;c:if test&#x3D;&quot;$&#123;s.count % 2 &#x3D;&#x3D; 0&#125;&quot;&gt;
             &lt;tr bgcolor&#x3D;&quot;red&quot;&gt;
                 &lt;td&gt;$&#123;s.count&#125;&lt;&#x2F;td&gt;
                 &lt;td&gt;$&#123;user.name&#125;&lt;&#x2F;td&gt;
                 &lt;td&gt;$&#123;user.age&#125;&lt;&#x2F;td&gt;
                 &lt;td&gt;$&#123;user.getBitStr()&#125;&lt;&#x2F;td&gt;
             &lt;&#x2F;tr&gt;
         &lt;&#x2F;c:if&gt;

         &lt;c:if test&#x3D;&quot;$&#123;s.count % 2 !&#x3D; 0&#125;&quot;&gt;
             &lt;tr bgcolor&#x3D;&quot;pink&quot;&gt;
                 &lt;td&gt;$&#123;s.count&#125;&lt;&#x2F;td&gt;
                 &lt;td&gt;$&#123;user.name&#125;&lt;&#x2F;td&gt;
                 &lt;td&gt;$&#123;user.age&#125;&lt;&#x2F;td&gt;
                 &lt;td&gt;$&#123;user.getBitStr()&#125;&lt;&#x2F;td&gt;
             &lt;&#x2F;tr&gt;
         &lt;&#x2F;c:if&gt;


     &lt;&#x2F;c:forEach&gt;

 &lt;&#x2F;table&gt;

&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC</title>
    <url>/2023/11/03/javaweb_MVC/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">MVC:开发模式</span>
</div>


<h4 id="1-jsp-演变历史"><a href="#1-jsp-演变历史" class="headerlink" title="1. jsp 演变历史"></a>1. jsp 演变历史</h4><ol>
<li>早期只有servlet，只能使用 response 输出标签数据，非常麻烦</li>
<li>后来有 jsp，简化 Servlet 的开发，如果过度使用 jsp，造成难以维护，难以分工协作</li>
<li>再后来，java的 web 开发，借鉴 mvc 开发模式，使得程序的设计更加合理</li>
</ol>
<h4 id="2-MVC："><a href="#2-MVC：" class="headerlink" title="2. MVC："></a>2. MVC：</h4><h5 id="1-M：Model，模型。JavaBean"><a href="#1-M：Model，模型。JavaBean" class="headerlink" title="1. M：Model，模型。JavaBean"></a>1. M：Model，模型。JavaBean</h5><ul>
<li>完成具体的业务操作，如：查询数据库，封装对象</li>
</ul>
<h5 id="2-V：View，视图。JSP"><a href="#2-V：View，视图。JSP" class="headerlink" title="2. V：View，视图。JSP"></a>2. V：View，视图。JSP</h5><ul>
<li>展示数据</li>
</ul>
<h5 id="3-C：Controller，控制器。Servlet"><a href="#3-C：Controller，控制器。Servlet" class="headerlink" title="3. C：Controller，控制器。Servlet"></a>3. C：Controller，控制器。Servlet</h5><ul>
<li>获取用户的输入</li>
<li>调用模型</li>
<li>将数据交给视图展示</li>
</ul>
<p><img src="D:\cun\blog\hexoblog\source\_posts\page_image\屏幕截图 2023-11-03 093221.png" alt=""></p>
<h4 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3. 优缺点"></a>3. 优缺点</h4><h5 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h5><ol>
<li>耦合性低，方便维护，可以利于分工协作</li>
<li>重用性高</li>
</ol>
<h5 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h5><ol>
<li>使得项目架构变得复杂</li>
</ol>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>Request</title>
    <url>/2023/10/24/javaweb_Request/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>Request</font>
</div>

<h2 id="1-request对象和response对象的原理"><a href="#1-request对象和response对象的原理" class="headerlink" title="1. request对象和response对象的原理"></a>1. request对象和response对象的原理</h2><ol>
<li>request和response对象是由服务器创建的。我们来使用他们</li>
<li>request对象是来获取请求消息，response对象是来设置响应消息</li>
</ol>
<h2 id="2-request对象继承体系结构"><a href="#2-request对象继承体系结构" class="headerlink" title="2.request对象继承体系结构"></a>2.request对象继承体系结构</h2><p>​    ServletRequest    — 接口</p>
<p>​    HttpServlet    — 接口</p>
<p>​    org.apache.catalina.connector.RequestFacade 类(tomcat)</p>
<h2 id="3-request功能"><a href="#3-request功能" class="headerlink" title="3. request功能"></a>3. request功能</h2><h3 id="1-获取请求数据消息"><a href="#1-获取请求数据消息" class="headerlink" title="1. 获取请求数据消息"></a>1. 获取请求数据消息</h3><h4 id="1-获取请求行数据"><a href="#1-获取请求行数据" class="headerlink" title="1. 获取请求行数据"></a>1. 获取请求行数据</h4><ul>
<li><p>GET / day14 / demo1?name=zhangsan HTTP / 1.1</p>
</li>
<li><p>方法 (*)重要</p>
<ol>
<li><p>获取请求方式 ：GET</p>
<ul>
<li>String getMethod()</li>
</ul>
</li>
<li><p>(*) 获取虚拟目录：/day14</p>
<ul>
<li>String getContextPath()</li>
</ul>
</li>
<li><p>获取Servlet路径：/demo1</p>
<ul>
<li>String getServletPath()</li>
</ul>
</li>
<li><p>获取get方式请求方式参数：name=zhangsan</p>
<ul>
<li>String getQueryString()</li>
</ul>
</li>
<li><p>(*) 获取请求URI：/day14/demo1</p>
<ul>
<li><p>String getRequestURI()：</p>
</li>
<li><p>StringBuffer getRequestURI()：</p>
</li>
<li><p>URL：统一资源定位符：<a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a></p>
</li>
<li><p>URI：统一资源标识符：/day14/demo1</p>
</li>
</ul>
</li>
<li><p>获取协议及版本：HTTP / 1.1</p>
<ul>
<li>String getProtocol()</li>
</ul>
</li>
<li><p>获取客户机的IP地址：</p>
<ul>
<li>String getRemoteAddr()</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="2-获取请求头数据"><a href="#2-获取请求头数据" class="headerlink" title="2. 获取请求头数据"></a>2. 获取请求头数据</h4><ul>
<li><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul>
<li>（*）String getHeader(String name)：通过请求头的名称获取请求头的值</li>
<li>Enumeration<String> getHeaderNames()：获取所有的请求头名称</li>
</ul>
</li>
</ul>
<h4 id="3-获取请求体数据"><a href="#3-获取请求体数据" class="headerlink" title="3. 获取请求体数据"></a>3. 获取请求体数据</h4><ul>
<li><h5 id="请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数"><a href="#请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数" class="headerlink" title="请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数"></a>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</h5></li>
<li><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol>
<li>获取流对象<ul>
<li>BufferedReader getReader()：获取字节输入流，只能操作字符数据</li>
<li>ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据</li>
</ul>
</li>
<li>再从流对象中拿数据</li>
</ol>
</li>
</ul>
<h3 id="2-其他功能"><a href="#2-其他功能" class="headerlink" title="2.其他功能"></a>2.其他功能</h3><h4 id="1-获取请求参数通用方式"><a href="#1-获取请求参数通用方式" class="headerlink" title="1. 获取请求参数通用方式"></a>1. 获取请求参数通用方式</h4><ul>
<li>不论get还是post请求方式都可以使用下列方法来获取请求参数</li>
</ul>
<h5 id="1-String-getParameter-String-name-：根据参数名称获取参数值-username-24-amp-password-123"><a href="#1-String-getParameter-String-name-：根据参数名称获取参数值-username-24-amp-password-123" class="headerlink" title="1.(*) String getParameter(String name)：根据参数名称获取参数值  username=24&amp;password=123"></a>1.(*) String getParameter(String name)：根据参数名称获取参数值  username=24&amp;password=123</h5><h5 id="2-String-getParameterValues-String-name-：根据参数名称获取参数值的数组-hobby-xx-amp-hobby-game"><a href="#2-String-getParameterValues-String-name-：根据参数名称获取参数值的数组-hobby-xx-amp-hobby-game" class="headerlink" title="2. String[] getParameterValues(String name)：根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game"></a>2. String[] getParameterValues(String name)：根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game</h5><h5 id="3-Enumeration-getParameterNames-：获取所有请求的参数名称"><a href="#3-Enumeration-getParameterNames-：获取所有请求的参数名称" class="headerlink" title="3. Enumeration getParameterNames()：获取所有请求的参数名称"></a>3. Enumeration<String> getParameterNames()：获取所有请求的参数名称</h5><h5 id="4-Map-getParameterMap-：获取所有参数的map集合"><a href="#4-Map-getParameterMap-：获取所有参数的map集合" class="headerlink" title="4. (*)Map getParameterMap()：获取所有参数的map集合"></a>4. (*)Map<String, String[]> getParameterMap()：获取所有参数的map集合</h5><ul>
<li>中文乱码问题<ul>
<li>get方式：tomcat 8 已经解决get乱码</li>
<li>post方式：会乱码<ul>
<li>解决：在获取参数前，设置request的编码request.setCharacterEncoding(“utf-8”);</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2. 请求转发"></a>2. 请求转发</h4><ul>
<li>一种在服务器内部的资源跳转方式</li>
</ul>
<h5 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1. 步骤"></a>1. 步骤</h5><ol>
<li>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</li>
<li>使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response)</li>
</ol>
<h5 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h5><ol>
<li>浏览器地址栏路径不发生变化</li>
<li>只能转发到当前的服务器内部资源中。</li>
<li>转发是一次请求</li>
</ol>
<h4 id="3-共享数据"><a href="#3-共享数据" class="headerlink" title="3.  共享数据"></a>3.  共享数据</h4><ul>
<li><h5 id="域对象：一个有作用范围的对象，可以在范围内共享数据"><a href="#域对象：一个有作用范围的对象，可以在范围内共享数据" class="headerlink" title="域对象：一个有作用范围的对象，可以在范围内共享数据"></a>域对象：一个有作用范围的对象，可以在范围内共享数据</h5></li>
<li><h5 id="request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据"><a href="#request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据" class="headerlink" title="request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据"></a>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</h5></li>
<li><p>方法：</p>
<ul>
<li>void setAttribute(String name, Object obj)：存储数据</li>
<li>Object getAttribute(String name)：通过键获取值</li>
<li>void removeAttribute(String name)：通过键移除键值对 </li>
</ul>
</li>
</ul>
<h4 id="4-获取ServletContext"><a href="#4-获取ServletContext" class="headerlink" title="4. 获取ServletContext"></a>4. 获取ServletContext</h4><ul>
<li>ServletContext getServletContext()</li>
</ul>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>Response对象</title>
    <url>/2023/10/25/javaweb_Response%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>Response对象</font>
</div>


<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="1-设置响应行"><a href="#1-设置响应行" class="headerlink" title="1. 设置响应行"></a>1. 设置响应行</h3><h4 id="1-格式："><a href="#1-格式：" class="headerlink" title="1. 格式："></a>1. 格式：</h4><ul>
<li>HTTP / 1.1  200  ok</li>
</ul>
<h4 id="2-设置状态码："><a href="#2-设置状态码：" class="headerlink" title="2. 设置状态码："></a>2. 设置状态码：</h4><ul>
<li>setStatus（int  sc）</li>
</ul>
<h3 id="2-设置响应头"><a href="#2-设置响应头" class="headerlink" title="2. 设置响应头"></a>2. 设置响应头</h3><ul>
<li>setHeader(String name, String value)</li>
</ul>
<h3 id="3-设置响应体"><a href="#3-设置响应体" class="headerlink" title="3. 设置响应体"></a>3. 设置响应体</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><h5 id="1-获取输出流"><a href="#1-获取输出流" class="headerlink" title="1. 获取输出流"></a>1. 获取输出流</h5><ul>
<li>字符输出流：PrintWriter getWriter（）</li>
<li>字节输出流：ServletOutputStream getOutputStream（）</li>
</ul>
<h5 id="2-使用输出流，将数据输出到客户端浏览器"><a href="#2-使用输出流，将数据输出到客户端浏览器" class="headerlink" title="2. 使用输出流，将数据输出到客户端浏览器"></a>2. 使用输出流，将数据输出到客户端浏览器</h5><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="1-完成重定向"><a href="#1-完成重定向" class="headerlink" title="1. 完成重定向"></a>1. 完成重定向</h3><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><ul>
<li>资源跳转的方式</li>
</ul>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="1-设置状态码302"><a href="#1-设置状态码302" class="headerlink" title="1. 设置状态码302"></a>1. 设置状态码302</h5><ul>
<li>response.setStatus(302);</li>
</ul>
<h5 id="2-设置响应头location"><a href="#2-设置响应头location" class="headerlink" title="2. 设置响应头location"></a>2. 设置响应头location</h5><ul>
<li>response.setHeader(“location”, “/responseDemo2”);</li>
</ul>
<h5 id="简单的重定向方法"><a href="#简单的重定向方法" class="headerlink" title="简单的重定向方法"></a>简单的重定向方法</h5><ul>
<li>response.sendRedirect(“/ day / responseDemo2”);</li>
</ul>
<h4 id="重定向的特点：redirect"><a href="#重定向的特点：redirect" class="headerlink" title="重定向的特点：redirect"></a>重定向的特点：redirect</h4><ol>
<li>地址栏发生变化</li>
<li>重定向可以访问其他站点（服务器）的资源</li>
<li>重定向是两次请求。不能使用request对象来共享数据</li>
</ol>
<h4 id="转发的特点：forward"><a href="#转发的特点：forward" class="headerlink" title="转发的特点：forward"></a>转发的特点：forward</h4><ol>
<li>转发地址栏路径不变</li>
<li>转发只能访问当前服务器下的资源</li>
<li>转发是一次请求，可以使用request对象来共享数据</li>
</ol>
<h4 id="forward-和-redirect-区别"><a href="#forward-和-redirect-区别" class="headerlink" title="forward 和 redirect 区别"></a>forward 和 redirect 区别</h4><h4 id="路径写法"><a href="#路径写法" class="headerlink" title="路径写法"></a>路径写法</h4><h5 id="1-路径分类"><a href="#1-路径分类" class="headerlink" title="1. 路径分类"></a>1. 路径分类</h5><ol>
<li><p>相对路径：通过相对路径不可以确定唯一资源</p>
<ul>
<li>如：./index.html</li>
<li>以. 开头路径</li>
<li><ul>
<li>规则：找到当前资源和目标资源之间的相对位置关系<ul>
<li>./：当前目录</li>
<li>../：后退一级目录</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>绝对路径：通过绝对路径可以确定唯一资源</p>
<ul>
<li><p>如：/responseDemo1</p>
</li>
<li><p>以 / 开头的路径</p>
</li>
<li></li>
<li>规则：判断定义的路径是给谁用的？判断请求将从哪儿发出<ul>
<li>给客户端浏览器使用：需要加虚拟目录（项目的访问路径）<ul>
<li>建议虚拟目录动态获取：request.getContextPath()</li>
<li>a标签，form标签 重定向…</li>
</ul>
</li>
<li>给服务器使用：不需要加虚拟目录<ul>
<li>转发路径</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="2-服务器输出字符数据到浏览器"><a href="#2-服务器输出字符数据到浏览器" class="headerlink" title="2. 服务器输出字符数据到浏览器"></a>2. 服务器输出字符数据到浏览器</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-获取字符输出流"><a href="#1-获取字符输出流" class="headerlink" title="1. 获取字符输出流"></a>1. 获取字符输出流</h5><h5 id="2-输出数据"><a href="#2-输出数据" class="headerlink" title="2. 输出数据"></a>2. 输出数据</h5><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><h5 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h5><ol>
<li>PrintWriter pw = response.getWriter(); 获取的流的默认编码是ISO-8859-1</li>
<li>设置该流的默认编码</li>
<li>告诉浏览器响应体使用的编码</li>
</ol>
<ul>
<li>简单的形式，设置编码，是在获取流之前设置：</li>
<li>response.setContentType(“text/html;charset=utf-8”);</li>
</ul>
<h3 id="3。-服务器输出字节数据到浏览器"><a href="#3。-服务器输出字节数据到浏览器" class="headerlink" title="3。 服务器输出字节数据到浏览器"></a>3。 服务器输出字节数据到浏览器</h3><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-获取字节输出流"><a href="#1-获取字节输出流" class="headerlink" title="1. 获取字节输出流"></a>1. 获取字节输出流</h5><h5 id="2-输出数据-1"><a href="#2-输出数据-1" class="headerlink" title="2. 输出数据"></a>2. 输出数据</h5><h3 id="4-验证码"><a href="#4-验证码" class="headerlink" title="4. 验证码"></a>4. 验证码</h3>]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2023/10/21/javaweb_Servlet/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>Servlet</font>
</div>


<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>运行在服务器端的小程序</li>
<li>Servlet就是一个接口，定义了java类被浏览器访问到(tomcat识别)的规则</li>
<li>定义一个类，实现Servlet接口，复写方法</li>
</ul>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="1-创建JavaEE项目"><a href="#1-创建JavaEE项目" class="headerlink" title="1.创建JavaEE项目"></a>1.创建JavaEE项目</h4><h4 id="2-定义一个类，实现Servlet接口"><a href="#2-定义一个类，实现Servlet接口" class="headerlink" title="2. 定义一个类，实现Servlet接口"></a>2. 定义一个类，实现Servlet接口</h4><h4 id="3-实现接口中的抽象方法"><a href="#3-实现接口中的抽象方法" class="headerlink" title="3. 实现接口中的抽象方法"></a>3. 实现接口中的抽象方法</h4><h4 id="4-配置Servlet"><a href="#4-配置Servlet" class="headerlink" title="4. 配置Servlet"></a>4. 配置Servlet</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置<span class="token class-name">Servlet</span> <span class="token operator">--</span><span class="token operator">></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">></span></span>
            <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>demo1<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>
            <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>day_13tomcat<span class="token punctuation">.</span></span>ServletDemo1</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span>
    
        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>
            <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>demo1<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>
            <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span>demo1<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li><h4 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h4><ol>
<li>当服务器接收到客户端浏览器的请求后，会解析请求URL路径</li>
<li>查找web.xml文件，是否有对应的<url-pattern>标签体内容</li>
<li>如果有，则在找到对应的<servlet-class>全类名</li>
<li>tomcat会将字节码文件加载进内存，并且创建其对象</li>
<li>调用其方法</li>
</ol>
</li>
<li><h4 id="Servlet中的生命周期方法"><a href="#Servlet中的生命周期方法" class="headerlink" title="Servlet中的生命周期方法"></a>Servlet中的生命周期方法</h4><ol>
<li><h5 id="被创建：执行init方法，只执行一次"><a href="#被创建：执行init方法，只执行一次" class="headerlink" title="被创建：执行init方法，只执行一次"></a>被创建：执行init方法，只执行一次</h5><ul>
<li>默认情况下，第一次被访问时，Servlet被创建</li>
<li>可以配置执行Servlet的创建时机<ul>
<li>在<Servlet>标签下配置<ol>
<li>第一次被访问时，创建<ul>
<li><load-on-startup>的值为负数</li>
</ul>
</li>
<li>在服务器启动时，创建<ul>
<li><load-on-startup>的值为非负数</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><h5 id="提供服务：执行service方法，执行多次"><a href="#提供服务：执行service方法，执行多次" class="headerlink" title="提供服务：执行service方法，执行多次"></a>提供服务：执行service方法，执行多次</h5><ul>
<li>每次访问Serlvet方法，只执行一次</li>
</ul>
</li>
<li><h5 id="被销毁：执行destroy方法，只执行一次"><a href="#被销毁：执行destroy方法，只执行一次" class="headerlink" title="被销毁：执行destroy方法，只执行一次"></a>被销毁：执行destroy方法，只执行一次</h5><ul>
<li>只有服务器正常关闭时，才会执行destroy方法</li>
<li>在Servlet销毁前执行，一般用于释放资源</li>
</ul>
</li>
</ol>
</li>
</ol>
   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>day_13tomcat</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Servlet实现方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo2</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/**
     * 初始化方法
     * 在Servlet被创建时执行，只会执行一次
     * @param servletConfig
     * @throws ServletException
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 获取ServletConfig对象(Servlet配置对象)
     * @return
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 提供服务方法
     * 每一次Servlet被访问时执行，执行多次
     * @param servletRequest
     * @param servletResponse
     * @throws ServletException
     * @throws IOException
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 获取Servlet的一些信息，版本，作者等。
     * @return
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 销毁方法
     * 在服务器正常关闭时执行一次。
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置<span class="token class-name">Servlet</span> <span class="token operator">--</span><span class="token operator">></span>
   <span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">></span></span>
       <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>demo2<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>
       <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>day_13tomcat<span class="token punctuation">.</span></span>ServletDemo2</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>
       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指定<span class="token class-name">Servlet</span>的创建时机
           <span class="token number">1.</span>第一次被访问时，创建
               <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span>的值为负数
           <span class="token number">2.</span>在服务器启动时，创建
               <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span>的值为非负数
       <span class="token operator">--</span><span class="token operator">></span>
   
       <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span>
   
   <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>
       <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>demo2<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>
       <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span>demo2<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>   ​    </p>
<h3 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0"></a>Servlet 3.0</h3><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><ul>
<li>支持注解配置，不需要web.xml</li>
</ul>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>创建JavaEE项目，选择Servlet3.0以上版本</li>
<li>定义一个类，实现Servlet接口</li>
<li>复写方法</li>
<li>在类上使用@webServlet注解，进行配置<ul>
<li>@webServlet(“资源路径”)</li>
</ul>
</li>
</ol>
<h3 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h3><h4 id="1-IDEA会位每一个tomcat部署的项目单独建立一份配置文件"><a href="#1-IDEA会位每一个tomcat部署的项目单独建立一份配置文件" class="headerlink" title="1. IDEA会位每一个tomcat部署的项目单独建立一份配置文件"></a>1. IDEA会位每一个tomcat部署的项目单独建立一份配置文件</h4><ul>
<li>查看控制台的log：Using CATALINA_BASE: “C:\Users\31025\AppData\Local\JetBrains\IntelliJIdea2023.2\tomcat\d133112c-782a-40d3-af7c-b1e21579d506”</li>
</ul>
<h4 id="2-工作空间项目-和-tomcat部署的web项目"><a href="#2-工作空间项目-和-tomcat部署的web项目" class="headerlink" title="2. 工作空间项目   和    tomcat部署的web项目"></a>2. 工作空间项目   和    tomcat部署的web项目</h4><ul>
<li>tomcat真正访问的是”tomcat部署的web项目”，”tomcat部署的web项目”对应着“工作空间项目” 的web目录下的所有资源</li>
</ul>
<h4 id="3-断点调试"><a href="#3-断点调试" class="headerlink" title="3.断点调试"></a>3.断点调试</h4><ul>
<li>debug启动 </li>
</ul>
<h3 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h3><p>​    Servlet — 接口 —— GenericServlet — 抽象类 —— HttpServlet — 抽象类</p>
<p>HttpServlet：对http协议的一种封装，简化操作</p>
<ol>
<li>定义类继承HttpServlet</li>
<li>复写doGet / doPost方法</li>
</ol>
<h3 id="Servlet-相关配置"><a href="#Servlet-相关配置" class="headerlink" title="Servlet 相关配置"></a>Servlet 相关配置</h3><h4 id="1-urlparttern-Servlet访问路径"><a href="#1-urlparttern-Servlet访问路径" class="headerlink" title="1. urlparttern.Servlet访问路径"></a>1. urlparttern.Servlet访问路径</h4><ol>
<li>一个Servlet可以定义多个访问路径</li>
<li>路径定义规则<ol>
<li>/xxx</li>
<li>/xxx/xxx  多层路径，目录结构</li>
<li>*.do</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>servletContext</title>
    <url>/2023/10/27/javaweb_servletContext/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>ServletContext</font>
</div>

<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul>
<li>代表整个web应用，可以和程序的容器（服务器）来通信</li>
</ul>
<h3 id="2-获取"><a href="#2-获取" class="headerlink" title="2. 获取"></a>2. 获取</h3><h4 id="1-通过request对象获取"><a href="#1-通过request对象获取" class="headerlink" title="1. 通过request对象获取"></a>1. 通过request对象获取</h4><ul>
<li>resquest.getServletContext()；</li>
</ul>
<h4 id="2-通过HttpServlet对象获取"><a href="#2-通过HttpServlet对象获取" class="headerlink" title="2. (*)通过HttpServlet对象获取"></a>2. (*)通过HttpServlet对象获取</h4><ul>
<li>this.getServletContext()；</li>
</ul>
<h3 id="3-功能"><a href="#3-功能" class="headerlink" title="3. 功能"></a>3. 功能</h3><h4 id="1-获取MIME类型"><a href="#1-获取MIME类型" class="headerlink" title="1. 获取MIME类型"></a>1. 获取MIME类型</h4><ul>
<li><p>MIME类型：在互联网通信过程中定义的一种文件数据类型</p>
<ul>
<li>格式： 大类型 / 小类型   text/html    image / jpeg</li>
</ul>
</li>
</ul>
<ul>
<li>获取：String getMimeType(String file)</li>
</ul>
<h4 id="2-域对象：共享数据"><a href="#2-域对象：共享数据" class="headerlink" title="2. 域对象：共享数据"></a>2. 域对象：共享数据</h4><ol>
<li>setAttribute(String name, Object value)</li>
<li>getAttribute(String name)</li>
<li>removeAttribute(String name)</li>
</ol>
<ul>
<li>ServletContext对象范围：所有用户所有请求的数据</li>
</ul>
<h4 id="3-获取文件的真实（服务器）路径"><a href="#3-获取文件的真实（服务器）路径" class="headerlink" title="3. 获取文件的真实（服务器）路径"></a>3. 获取文件的真实（服务器）路径</h4><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="1-文件下载需求："><a href="#1-文件下载需求：" class="headerlink" title="1. 文件下载需求："></a>1. 文件下载需求：</h4><ol>
<li>页面显示超链接</li>
<li>点击超链接后弹出下载提示框</li>
<li>完成图片文件下载</li>
</ol>
<h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h4><ol>
<li>超链接指向的资源如果能被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</li>
<li>任何资源都必须弹出下载提示框</li>
<li>使用响应头设置资源的打开方式<ul>
<li>content - disposition:attachment; filename = xxx</li>
</ul>
</li>
</ol>
<h4 id="4-步骤"><a href="#4-步骤" class="headerlink" title="4. 步骤"></a>4. 步骤</h4><ol>
<li>定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</li>
<li>定义Servlet<ol>
<li>获取文件名称</li>
<li>使用字节输入流加载文件进内存</li>
<li>指定response的响应头：context - disposition：attachment; filename=xxx</li>
<li>将数据写出到response输出流</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>会话技术</title>
    <url>/2023/10/31/javaweb_%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px; color:pink">会话技术</span>
</div>

<p><strong>1. 会话: 一次会话中包含多次请求和响应。</strong></p>
<ul>
<li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，知道有一方断开为止</li>
</ul>
<p><strong>2. 功能：在一次会话的范围内多次请求间，共享数据</strong></p>
<p><strong>3. 方式：</strong></p>
<ol>
<li>客户端会话技术：Cookie</li>
<li>服务器端会话技术：Session</li>
</ol>
<div align='center'>
    <span style="font-size:38px; color:orange">Cookie</span>
</div>

<h3 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h3><ul>
<li>客户端会话技术，将数据保存到客户端</li>
</ul>
<h3 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2. 快速入门："></a>2. 快速入门：</h3><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 创建<span class="token class-name">Cookie</span>对象，绑定数据
	<span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span>
<span class="token number">2.</span> 发送<span class="token class-name">Cookie</span>对象
	response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie<span class="token punctuation">)</span>
<span class="token number">3.</span> 获取<span class="token class-name">Cookie</span>，拿到数据
	<span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-实现原理："><a href="#3-实现原理：" class="headerlink" title="3. 实现原理："></a>3. 实现原理：</h3><ul>
<li>基于响应头set-cookie 和请求头 Cookie 实现</li>
</ul>
<h3 id="4-cookie-的细节"><a href="#4-cookie-的细节" class="headerlink" title="4. cookie 的细节"></a>4. cookie 的细节</h3><h5 id="1-一次可不可以发送多个Cookie？"><a href="#1-一次可不可以发送多个Cookie？" class="headerlink" title="1. 一次可不可以发送多个Cookie？"></a>1. 一次可不可以发送多个Cookie？</h5><ol>
<li>可以创建多个Cookie对象，使用response调用多次addCookie方法发送Cookie 即可</li>
</ol>
<h5 id="2-Cookie-在浏览器中保存多长时间？"><a href="#2-Cookie-在浏览器中保存多长时间？" class="headerlink" title="2. Cookie 在浏览器中保存多长时间？"></a>2. Cookie 在浏览器中保存多长时间？</h5><ol>
<li>默认情况下，当浏览器关闭后，Cookie数据被销毁</li>
<li>持久化存储:<ul>
<li>setMaxAge(int seconds)<ol>
<li>正数：将Cookie 数据写到硬盘的文件中。持久化存储。Cookie存活的秒数</li>
<li>负数：默认值</li>
<li>零：删除Cookie信息</li>
</ol>
</li>
</ul>
</li>
</ol>
<h5 id="3-Cookie-能不能存中文？"><a href="#3-Cookie-能不能存中文？" class="headerlink" title="3. Cookie 能不能存中文？"></a>3. Cookie 能不能存中文？</h5><ul>
<li>可以，但不支持特殊字符，建议用URL编码</li>
</ul>
<h5 id="4-Cookie-共享问题？"><a href="#4-Cookie-共享问题？" class="headerlink" title="4. Cookie 共享问题？"></a>4. Cookie 共享问题？</h5><ol>
<li><p>假设在一个 tomcat 服务器中，部署了多个 web 项目，那么在这些 web 项目中 cookie 能不能共享</p>
<ul>
<li>默认情况下不能共享<ul>
<li>setPath(String path): 设置 cookie 的获取范围。默认情况下，设置当前的虚拟目录<ul>
<li>如果要共享，则可以将 path 设置为”/“</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>不同的 tomcat 服务器间 cookie 共享问题？</p>
<ul>
<li>setDomin(String path): 如果设置一级域名相同，那么多个服务器之间 cookie 可以共享<ul>
<li>setDomin(“.baidu.com”), 那么tieba.baidu.com 和 news.baidu.com 中 cookie 可以共享</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="5-Cookie-的特点和作用"><a href="#5-Cookie-的特点和作用" class="headerlink" title="5. Cookie 的特点和作用"></a>5. Cookie 的特点和作用</h3><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h4><ol>
<li>cookie 存储数据在客户端浏览器</li>
<li>浏览器对于单个 cookie 的大小有限制(4kb) 以及 对同一个域名下的总 cookie 数量也有限制(20个)</li>
</ol>
<h4 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h4><ol>
<li>cookie 一般用于存储少量不太敏感的数据</li>
<li>在不登陆的情况下，完成服务器对客户端的身份识别</li>
</ol>
<h3 id="6-案例"><a href="#6-案例" class="headerlink" title="6. 案例"></a>6. 案例</h3><ul>
<li>记住上一次访问时间</li>
</ul>
<h4 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h4><ol>
<li>访问一个 Servlet, 如果是第一次访问，则提示：您好，欢迎您首次访问。</li>
<li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为：显示时间字符串</li>
</ol>
<h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h4><ol>
<li>可以采用 Cookie l来完成</li>
<li>在服务器中的 Servlet 判断是否有一个名为 lastTime 的 Cookie<ol>
<li>有：不是第一次访问<ol>
<li>响应数据：欢迎回来，您上次访问时间是：lastTime=2023年1月1日11:11:11</li>
<li>写回 Cookie : lastTime=2023年1月1日11:11:11</li>
</ol>
</li>
<li>没有：是第一次访问<ol>
<li>响应数据：您好，欢迎您首次访问</li>
<li>写回 Cookie : lastTime=2023年1月1日11:11:11</li>
</ol>
</li>
</ol>
</li>
</ol>
<div align='center'>
    <span style="font-size:38px; color:orange">Session</span>
</div>

<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul>
<li>服务器会话技术，在一次会话的多次请求见共享数据，将数据保存在服务器端的对象中。HttpSession</li>
</ul>
<h3 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门:"></a>2. 快速入门:</h3><h5 id="1-获取HttpSession对象："><a href="#1-获取HttpSession对象：" class="headerlink" title="1. 获取HttpSession对象："></a>1. 获取HttpSession对象：</h5><ul>
<li>HttpSession session = request.getSession();</li>
</ul>
<h5 id="2-使用HttpSession对象："><a href="#2-使用HttpSession对象：" class="headerlink" title="2. 使用HttpSession对象："></a>2. 使用HttpSession对象：</h5><ul>
<li>Object getAttribute (String name)</li>
<li>void setAttribute(String name, Object value)</li>
<li>void removeAttribute(String name)</li>
</ul>
<h3 id="3-原理"><a href="#3-原理" class="headerlink" title="3. 原理"></a>3. 原理</h3><ul>
<li>Session 的实现是依赖于Cookie 的</li>
</ul>
<h3 id="4-细节："><a href="#4-细节：" class="headerlink" title="4. 细节："></a>4. 细节：</h3><h5 id="1-当客户端关闭后，服务器端不关闭，两次获取session是否为同一个？"><a href="#1-当客户端关闭后，服务器端不关闭，两次获取session是否为同一个？" class="headerlink" title="1. 当客户端关闭后，服务器端不关闭，两次获取session是否为同一个？"></a>1. 当客户端关闭后，服务器端不关闭，两次获取session是否为同一个？</h5><ul>
<li><p>默认情况下。不是。</p>
</li>
<li><p>如果需要相同，则可以创建Cookie, 键为JSESSIONID, 设置最大存活时间，让cookie持久化保存</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cookie</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//存活1小时</span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h5 id="2-客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"><a href="#2-客户端不关闭，服务器关闭后，两次获取的session是同一个吗？" class="headerlink" title="2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"></a>2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</h5><ul>
<li>不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作<ul>
<li>session 的钝化：<ul>
<li>在服务器正常关闭之前，将session 对象序列化到硬盘上</li>
</ul>
</li>
<li>session 的活化<ul>
<li>在服务器启动后，将session 文件转化为内存中的session 对象即可</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="3-session-什么时候被销毁？"><a href="#3-session-什么时候被销毁？" class="headerlink" title="3. session 什么时候被销毁？"></a>3. session 什么时候被销毁？</h5><ol>
<li><p>服务器关闭</p>
</li>
<li><p>session 对象调用invalidate()。</p>
</li>
<li><p>session 默认失效时间  30分钟.</p>
<ul>
<li><p>选择性配置修改</p>
<session - config>

<p>​    <session - timeout>30&lt;/session - timeout&gt;</p>
<p>&lt;/session - config&gt;</p>
</li>
</ul>
</li>
</ol>
<h3 id="5-session-的特点"><a href="#5-session-的特点" class="headerlink" title="5. session 的特点"></a>5. session 的特点</h3><ol>
<li>session 用于存储一次会话的多次请求的数据，存在服务器端</li>
<li>session 可以存储任意类型，任意大小的数据</li>
</ol>
<ul>
<li><p>session 与 Cookie 的区别</p>
<ol>
<li><p>session 存储数据在服务器端，Cookie 在客户端</p>
</li>
<li><p>session 没有数据大小限制，Cookie 有</p>
</li>
<li><p>session 数据安全，Cookie 相对不安全</p>
</li>
</ol>
</li>
</ul>
<h3 id="6-案例：验证码"><a href="#6-案例：验证码" class="headerlink" title="6. 案例：验证码"></a>6. 案例：验证码</h3><h4 id="1-案例需求："><a href="#1-案例需求：" class="headerlink" title="1. 案例需求："></a>1. 案例需求：</h4><h5 id="1-访问带有验证码的登录页面login-jsp"><a href="#1-访问带有验证码的登录页面login-jsp" class="headerlink" title="1. 访问带有验证码的登录页面login.jsp"></a>1. 访问带有验证码的登录页面login.jsp</h5><h5 id="2-用户输入用户名，密码以及验证码"><a href="#2-用户输入用户名，密码以及验证码" class="headerlink" title="2. 用户输入用户名，密码以及验证码"></a>2. 用户输入用户名，密码以及验证码</h5><ul>
<li>如果用户名和密码输入有误，跳转登录页面，提示：用户名或密码错误</li>
<li>如果验证码输入有误，跳转登录页面，提示：验证码错误</li>
<li>如果全部输入正确，则跳转主页success.jsp，显示：&lt;用户名&gt;, 欢迎您</li>
</ul>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>案例——用户登录</title>
    <url>/2023/10/25/javaweb_%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<div align='center'>
    <font size='8' color='pink'>案例：用户登录</font>
</div>

<h2 id="用户登录案例需求"><a href="#用户登录案例需求" class="headerlink" title="用户登录案例需求"></a>用户登录案例需求</h2><ol>
<li><p>编写login.html登录页面</p>
<p>username &amp; password 两个输入框</p>
</li>
<li><p>使用Druid数据库连接池技术，操作mysql，day14数据库中user表</p>
</li>
<li><p>使用JdbcTemplate技术封装JDBC</p>
</li>
<li><p>登录成功跳转到SuccessServlet展示：登录成功！用户名，恭喜您</p>
</li>
<li><p>登录失败跳转到FailServlet展示：登陆失败，用户名或密码错误</p>
</li>
</ol>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="C:\Users\31025\Pictures\Screenshots\屏幕截图 2023-10-24 165032.png" alt=""></p>
<h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><h5 id="1-创建项目，导入html页面，配置文件，jar包"><a href="#1-创建项目，导入html页面，配置文件，jar包" class="headerlink" title="1. 创建项目，导入html页面，配置文件，jar包"></a>1. 创建项目，导入html页面，配置文件，jar包</h5><h5 id="2-创建数据库环境"><a href="#2-创建数据库环境" class="headerlink" title="2. 创建数据库环境"></a>2. 创建数据库环境</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE day14

USE day14;

CREATE TABLE USER(
	id INT PRIMARY KEY AUTO_INCREMENT,
	username VARCHAR(32) UNIQUE NOT NULL,
	PASSWORD VARCHAR(32) NOT NULL
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="3-创建包domain，创建类User"><a href="#3-创建包domain，创建类User" class="headerlink" title="3. 创建包domain，创建类User"></a>3. 创建包domain，创建类User</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">domain</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 用户的实体类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> username<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>
                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token string">", username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>
                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>
                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="4-JBDC工具类，使用Druid连接池"><a href="#4-JBDC工具类，使用Druid连接池" class="headerlink" title="4.JBDC工具类，使用Druid连接池"></a>4.JBDC工具类，使用Druid连接池</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * JBDC工具类 使用Druid连接池
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> ds<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 1.加载配置文件</span>
            <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 使用ClassLoader加载配置文件，获取字节输入流</span>
            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 2.初始化连接池对象</span>
            ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 获取连接池对象
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> <span class="token function">getDateSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 获取连接Connection对象
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="5-创建包dao，创建类UserDao，提供login方法"><a href="#5-创建包dao，创建类UserDao，提供login方法" class="headerlink" title="5. 创建包dao，创建类UserDao，提供login方法"></a>5. 创建包dao，创建类UserDao，提供login方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">Dao</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">domain<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">DataAccessException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BeanPropertyRowMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JdbcTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">util<span class="token punctuation">.</span></span><span class="token class-name">JDBCUtils</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 操作数据库中User表的类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//声明JDBCTemplate对象共用</span>
    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getDateSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 登录方法
     * @param loginUser 只有用户名和密码
     * @return user包含用户全部数据,没有查询到，返回null
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//1.编写sql</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where username = ? and password = ?"</span><span class="token punctuation">;</span>
            <span class="token comment">//2.调用方法</span>
            <span class="token class-name">User</span> user <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    loginUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> user<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DataAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录日志</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="6-编写Servlet-LoginServlet类"><a href="#6-编写Servlet-LoginServlet类" class="headerlink" title="6.编写Servlet.LoginServlet类"></a>6.编写Servlet.LoginServlet类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">web<span class="token punctuation">.</span></span><span class="token class-name">Servlet</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token class-name">Dao</span><span class="token punctuation">.</span><span class="token class-name">UserDao</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">domain<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/loginServlet"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//1.设置编码</span>
        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.设置请求参数</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.封装user对象</span>
        <span class="token class-name">User</span> loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        loginUser<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        loginUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4.调用UserDao的login对象</span>
        <span class="token class-name">UserDao</span> dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//5.判断user</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//登陆失败</span>
            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/failServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//登录成功</span>
            <span class="token comment">//存储数据</span>
            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//转发</span>
            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/successServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="7-login-html中form表单中action路径的写法"><a href="#7-login-html中form表单中action路径的写法" class="headerlink" title="7. login.html中form表单中action路径的写法"></a>7. login.html中form表单中action路径的写法</h5><ul>
<li>虚拟目录+Servlet的资源路径</li>
</ul>
<h5 id="8-BeanUtils工具类，简化数据封装"><a href="#8-BeanUtils工具类，简化数据封装" class="headerlink" title="8. BeanUtils工具类，简化数据封装"></a>8. BeanUtils工具类，简化数据封装</h5><ul>
<li>用于封装JavaBean的</li>
</ul>
<ol>
<li>JavaBean：标准的Java类<ol>
<li>要求：<ol>
<li>类必须被public修饰</li>
<li>必须提供空参的构造器</li>
<li>成员变量必须使用private修饰</li>
<li>提供公共setter和getter方法</li>
</ol>
</li>
<li>功能：封装数据</li>
</ol>
</li>
<li>概念：<ul>
<li>成员变量</li>
<li>属性：setter和getter方法截取后的产物<ul>
<li>例如：getUsername() —&gt; Username —&gt; username</li>
</ul>
</li>
</ul>
</li>
<li>方法<ol>
<li>populate(Object obj, Map map)：将map集合的键值对信息，封装到对应的JavaBean对象中</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>友谊赛题解</title>
    <url>/2023/11/17/%E5%8F%8B%E8%B0%8A%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px;color:pink">友谊赛~</span>
</div>




<div align='center'>
    <span style="font-size:30px;color:pink">A wyh的数字</span>
</div>


<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p><strong>——枚举</strong></p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>T组数据，每组数据中给定一个数字，判断数字中有多少个 7</p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>遍历数字每一位即可，个人推荐用字符串写，更便捷</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>   
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'7'</span><span class="token punctuation">)</span> 
                cnt <span class="token operator">++</span> <span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C++</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>   
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        string s<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'7'</span><span class="token punctuation">)</span> 
                cnt <span class="token operator">++</span> <span class="token punctuation">;</span>

        cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px;color:pink">B 越狱</span>
</div>


<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>有一个长度为 n 的数组 a ，大意就是找到一个数 x ，然后在数组中所有小于 x 的数的数量 和 所有大于 x 的数的数量取min。</p>
<h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>要保证两个数量都尽可能的大，就要取中间排名 n / 2 的数字。找到这个数字然后 + 1 就是 x 的值。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> res <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C ++ </p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> res <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px;color:pink">C 光之屏障</span>
</div>


<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p><strong>——暴力，思维</strong></p>
<h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给定两个数 x ,y，求一个数 z 满足 x &lt;= z &lt;= y, 且 z 是 2 的方幂</p>
<h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>数据不大，模拟暴力即可。</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> res <span class="token operator">&amp;&amp;</span> res <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                flag <span class="token operator">=</span> true<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>  
            <span class="token punctuation">&#125;</span> 
            res <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C++</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> res <span class="token operator">&amp;&amp;</span> res <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                flag <span class="token operator">=</span> true<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>  
            <span class="token punctuation">&#125;</span> 
            res <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> true<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px;color:pink">D 熊熊，觅食！</span>
</div>

<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p><strong>——思维</strong></p>
<h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>小熊初始在原点0，食物在 x 的位置上，现在小熊每一步有 3 种选择：1，2，3. 问最少需要多少步</p>
<h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>每一步都走3，直到距离食物小于3，如果没到再走一步就可以。</p>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

        x <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> res <span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C++</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> x<span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> res <span class="token operator">++</span> <span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px;color:pink">E 多项式输出</span>
</div>

<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p><strong>——数字，字符串</strong></p>
<h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>……详细看题目描述</p>
<h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>直接模拟即可， 需要注意的细节较多，详细看代码的注释</p>
<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//等于0，这一项为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">//输出正负号，注意判断首项不输出正号</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//系数为 1 ，不输出系数，只有尾项需要</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//除了最后一项，都要输出 x</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//在除了最后一项的基础上，倒数第二项也不用输出 ^i</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"^%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C++</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//等于0，这一项为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">//输出正负号，注意判断首项不输出正号</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">'+'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">'-'</span><span class="token punctuation">;</span>
        <span class="token comment">//系数为 1 ，不输出系数，只有尾项需要</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//除了最后一项，都要输出 x</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">'x'</span><span class="token punctuation">;</span>
        <span class="token comment">//在除了最后一项的基础上，倒数第二项也不用输出 ^i</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">'^'</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px;color:pink">F 啊，这居然是个质数</span>
</div>

<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p><strong>——质数判断</strong></p>
<h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>输入 x ， 找到2~x之间最大的质数</p>
<h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>从大到小枚举，用试除法判断是否为质数即可</p>
<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//试除法判断质数</span>
bool <span class="token function">is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>

    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_prime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>    

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C++</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token comment">//试除法判断质数</span>
bool <span class="token function">is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>

    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> x<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_prime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>    

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px;color:pink">G 小雨的三角形</span>
</div>

<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><p><strong>前缀和，枚举，思维</strong></p>
<h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><p>填满数字的三角形()，每一行的最左和最右两个位置的数确定，剩下的每个数等于上面和左上的两个数之和。</p>
<p>共有 m 次询问，每次询问 x 层到 y 层的所有数的和</p>
<h4 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h4><p>前缀和预处理出来每一行的值，然后再用一次前缀和求出前 i 行的值，每次询问直接输出即可，记得取模</p>
<h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> 
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> i<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">else</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>


    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//需要额外加一个mod, 因为求前缀和的时候，每一步都取余，可能会导致数组里所存的数中前大后小，相减出现负数</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C++</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> 
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> i<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">else</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>


    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>
        <span class="token comment">//需要额外加一个mod, 因为求前缀和的时候，每一步都取余，可能会导致数组里所存的数中前大后小，相减出现负数</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px;color:pink">H 九九八十一</span>
</div>

<h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><h4 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h4><p>给定n <em> n的乘法表，给定一个字符c，输出字符 c 在n </em> n乘法表中出现的次数。</p>
<h4 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h4><p>给出了九九乘法表的输出模板，其实也就是告诉我们都有哪些字符，除了数字外，还有字符乘( * ), 等号( = ), 逗号( , ),这三个字符，遍历乘法表即可。</p>
<h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span> 
<span class="token keyword">char</span> c<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> ans <span class="token operator">++</span> <span class="token punctuation">;</span>
        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'='</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">','</span><span class="token punctuation">)</span> cnt <span class="token operator">++</span> <span class="token punctuation">;</span>
            cnt <span class="token operator">+=</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cnt <span class="token operator">+=</span> <span class="token function">check</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cnt <span class="token operator">+=</span> <span class="token function">check</span><span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C++</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span> 
<span class="token keyword">char</span> c<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> ans <span class="token operator">++</span> <span class="token punctuation">;</span>
        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> c <span class="token operator">>></span> n<span class="token punctuation">;</span>

    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'='</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">','</span><span class="token punctuation">)</span> cnt <span class="token operator">++</span> <span class="token punctuation">;</span>
            cnt <span class="token operator">+=</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cnt <span class="token operator">+=</span> <span class="token function">check</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cnt <span class="token operator">+=</span> <span class="token function">check</span><span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px;color:pink">I 图像识别</span>
</div>

<p><strong>——思维，模拟</strong></p>
<h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><h4 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h4><p>现有一个” * “画成的坐标轴，有一个 “ # “代表目标点，” . “表示空。现在以二维矩阵的形式给出图像，需要求出目标点” # “，所在位置的坐标。</p>
<h4 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h4><p>找到坐标原点和目标点的位置即可。</p>
<p>上下左右四个方位都为” * “, 就是坐标原点， “ # “ 就是目标点</p>
<h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'#'</span><span class="token punctuation">)</span> x1 <span class="token operator">=</span> i<span class="token punctuation">,</span> y1 <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span>
                x0 <span class="token operator">=</span> i<span class="token punctuation">,</span> y0 <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> y1 <span class="token operator">-</span> y0<span class="token punctuation">,</span> x0 <span class="token operator">-</span> x1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C++</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
            cin <span class="token operator">>></span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'#'</span><span class="token punctuation">)</span> x1 <span class="token operator">=</span> i<span class="token punctuation">,</span> y1 <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span>
                x0 <span class="token operator">=</span> i<span class="token punctuation">,</span> y0 <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    cout <span class="token operator">&lt;&lt;</span> y1 <span class="token operator">-</span> y0 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> x0 <span class="token operator">-</span> x1<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div align='center'>
    <span style="font-size:30px;color:pink">J 汀博尔</span>
</div>

<p><strong>——二分</strong></p>
<h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><h4 id="题意-9"><a href="#题意-9" class="headerlink" title="题意"></a>题意</h4><p>有n棵树，每棵树有初始高度，每个月会长高一些。</p>
<p>现在有个木料总量为S的订单，要求没块木料长度不小于L，而且木料必须是整棵树。需要求出要等多少个月才能满足订单</p>
<h4 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h4><p>数据很大，枚举天数会超时，所以需要用到二分，判断天数的时间复杂度降低为O(logn)。</p>
<h4 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h4><p>C</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

ll n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> L<span class="token punctuation">;</span>
ll h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll mx<span class="token punctuation">;</span>

ll <span class="token function">max</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

bool <span class="token function">check</span><span class="token punctuation">(</span>ll d<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> L<span class="token punctuation">)</span> sum <span class="token operator">+=</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">>=</span> s<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 

    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    ll l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> mx<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ll mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C++</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

ll n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> L<span class="token punctuation">;</span>
ll h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll mx<span class="token punctuation">;</span>

bool <span class="token function">check</span><span class="token punctuation">(</span>ll d<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> L<span class="token punctuation">)</span> sum <span class="token operator">+=</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">>=</span> s<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> s <span class="token operator">>></span> L<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cin <span class="token operator">>></span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    ll l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> mx<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ll mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    cout <span class="token operator">&lt;&lt;</span> l<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>友谊赛</tag>
      </tags>
  </entry>
  <entry>
    <title>快读</title>
    <url>/2023/11/23/%E5%BF%AB%E8%AF%BB/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:40px; color:pink">快读</span>
</div>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> f <span class="token operator">?</span> <span class="token operator">-</span>x <span class="token operator">:</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//使用：</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>板子</category>
      </categories>
      <tags>
        <tag>快读</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2023/11/24/javase_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px;color:pink">网络编程</span>
</div>


<h3 id="1-网络编程"><a href="#1-网络编程" class="headerlink" title="1. 网络编程"></a>1. 网络编程</h3><h4 id="1-网络编程概述："><a href="#1-网络编程概述：" class="headerlink" title="1. 网络编程概述："></a>1. 网络编程概述：</h4><ul>
<li>在网络通信协议下，实现网络互连的不同计算机上运行的程序可以进行数据交换</li>
</ul>
<h4 id="2-网络编程3要素"><a href="#2-网络编程3要素" class="headerlink" title="2. 网络编程3要素"></a>2. 网络编程3要素</h4><ol>
<li><strong>IP地址</strong></li>
<li><strong>端口</strong>  (应用程序的标识)</li>
<li><strong>协议</strong>  (通信双方必须同时遵守才能完成数据交换)  常见的协议由UPD协议和TCP协议</li>
</ol>
<h4 id="3-IP地址"><a href="#3-IP地址" class="headerlink" title="3. IP地址"></a>3. IP地址</h4><ul>
<li>是网路中设备的唯一标识</li>
</ul>
<ol>
<li>IP地址分为两大类：<ul>
<li>IPv4 和 IPv6</li>
</ul>
</li>
<li>常用命令<ul>
<li>cmd<ul>
<li>ipconfig: 查看本机的IP地址</li>
<li>Ping IP地址：检查网络是否联通</li>
</ul>
</li>
</ul>
</li>
<li>特殊IP地址<ul>
<li>127.0.0.1<ul>
<li>是回送地址，可以代表本机地址，一般用来测试使用</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="4-InetAddress"><a href="#4-InetAddress" class="headerlink" title="4. InetAddress"></a>4. InetAddress</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">InetAddress</span> <span class="token function">getByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">)</span>   <span class="token comment">//确定主机名称的IP地址。主机名称可以是及其名称，也可以是IP地址</span>
<span class="token class-name">String</span> <span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>					  <span class="token comment">//获取此IP地址的主机名称</span>
<span class="token class-name">String</span> <span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>					  <span class="token comment">//获取IP地址字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="5-端口"><a href="#5-端口" class="headerlink" title="5. 端口"></a>5. 端口</h4><ul>
<li>设备上应用程序的唯一标识</li>
</ul>
<h4 id="6-协议"><a href="#6-协议" class="headerlink" title="6. 协议"></a>6. 协议</h4><ul>
<li>计算机网络中，连接和通信的规则被称为网络通信协议</li>
<li>UPD协议：用户数据报协议</li>
<li>TCP协议：传输控制协议  ——&gt; ——&gt; ——&gt; ”三次握手“</li>
</ul>
<h3 id="2-UDP-通信程序"><a href="#2-UDP-通信程序" class="headerlink" title="2. UDP 通信程序"></a>2. UDP 通信程序</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p><strong>1. UPD协议是一种不可靠的网络协议，他在通信的两端各建立一个Socket对象，但这两个只是发送，接收的对象。因此基于UPD协议的通信双方而言，没有所谓的客户端和服务器概念</strong></p>
<h4 id="2-UPD发送数据"><a href="#2-UPD发送数据" class="headerlink" title="2. UPD发送数据"></a>2. UPD发送数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 创建发送端<span class="token class-name">Socket</span>对象<span class="token punctuation">(</span><span class="token class-name">DatagramSocket</span><span class="token punctuation">)</span>
	<span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">2.</span> 创建数据，并把数据打包  —— 要发送的数据，长度，地址，端口
	<span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span>
<span class="token number">3.</span> 调用<span class="token class-name">DatagramSocket</span>对象发送数据
	<span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Datagrampacket</span> p<span class="token punctuation">)</span>
<span class="token number">4.</span> 关闭发送端
	<span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-UPD接收数据"><a href="#3-UPD接收数据" class="headerlink" title="3. UPD接收数据"></a>3. UPD接收数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 创建接收数据端
	<span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">2.</span> 接收数据
	<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
	ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">3.</span> 解析数据包，显示数据
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">4.</span> 关闭接收端
	ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-TCP通信程序"><a href="#3-TCP通信程序" class="headerlink" title="3. TCP通信程序"></a>3. TCP通信程序</h3><h4 id="1-Tcp发送数据"><a href="#1-Tcp发送数据" class="headerlink" title="1. Tcp发送数据"></a>1. Tcp发送数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 创建客户端的<span class="token class-name">Socket</span>对象<span class="token punctuation">(</span><span class="token class-name">Socket</span><span class="token punctuation">)</span>
	<span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span>
<span class="token number">2.</span> 获取输出流，写数据
	<span class="token class-name">OutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token number">3.</span> 释放资源
	<span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-Tcp接收数据"><a href="#2-Tcp接收数据" class="headerlink" title="2. Tcp接收数据"></a>2. Tcp接收数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 创建服务器端<span class="token class-name">Socket</span>对象<span class="token punctuation">(</span><span class="token class-name">ServerSocket</span><span class="token punctuation">)</span>
	<span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span>
<span class="token number">2.</span> 监听客户端端口，返回一个<span class="token class-name">Socket</span>对象
	<span class="token class-name">Socket</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">3.</span> 获取输入流，读数据，并把数据显示在控制台
	<span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">4.</span> 释放资源
	<span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>sk.shutdownOutput(); //表示结束</p>
<h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p>用线程来实现多个客户端上传服务器</p>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda表达式</title>
    <url>/2023/11/24/javase_Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px;color:pink">Lambda表达式</span>
</div>

<ul>
<li><strong>Lambda就是一个接口的类实现</strong></li>
</ul>
<h4 id="1-Lambda表达式三要素"><a href="#1-Lambda表达式三要素" class="headerlink" title="1. Lambda表达式三要素"></a>1. Lambda表达式三要素</h4><ol>
<li>形式参数</li>
<li>箭头</li>
<li>代码块</li>
</ol>
<h4 id="2-Lambda使用前提"><a href="#2-Lambda使用前提" class="headerlink" title="2. Lambda使用前提"></a>2. Lambda使用前提</h4><ol>
<li>有一个接口</li>
<li>有且仅有一个抽象方法</li>
</ol>
<h4 id="3-Lambda省略模式"><a href="#3-Lambda省略模式" class="headerlink" title="3. Lambda省略模式"></a>3. Lambda省略模式</h4><ol>
<li>参数类型可以省略</li>
<li>参数有且仅有一个，小括号可以省略</li>
<li>代码块语句只有一条，可以省略大括号和分号，以及return</li>
</ol>
<h4 id="4-Lambda表达式和匿名内部类的区别"><a href="#4-Lambda表达式和匿名内部类的区别" class="headerlink" title="4. Lambda表达式和匿名内部类的区别"></a>4. Lambda表达式和匿名内部类的区别</h4><ol>
<li>所需类型不同<ul>
<li>匿名内部类：      可以是接口，可以是抽象类，也可以是具体类</li>
<li>Lambda表达式：只能是接口</li>
</ul>
</li>
<li>使用限制不同<ul>
<li>匿名内部类：      无限制</li>
<li>Lambda表达式：接口中只能由一个抽象方法</li>
</ul>
</li>
<li>实现原理不同<ul>
<li>匿名内部类：        编译之后，产生一个单独的 .class文件</li>
<li>Lambda表达式：   编译之后，没有一个单独的 .class字节码文件，对应的字节码文件会在运行时动态生成</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>javase_多线程</title>
    <url>/2023/11/16/javase_%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p><div align='center'>
    <span style="font-size:45px;color:pink">多线程</span>
</div></p>
<h3 id="1-实现多线程"><a href="#1-实现多线程" class="headerlink" title="1. 实现多线程"></a>1. 实现多线程</h3><h4 id="1-进程"><a href="#1-进程" class="headerlink" title="1. 进程"></a>1. 进程</h4><ul>
<li><strong>是正在运行的程序</strong></li>
</ul>
<ol>
<li>系统进行资源分配和调用的独立单位</li>
<li>每一个进程都有他自己的内存空间和系统资源</li>
</ol>
<h4 id="2-线程"><a href="#2-线程" class="headerlink" title="2. 线程"></a>2. 线程</h4><ul>
<li><strong>是进程中的单个顺序控制流，是一条执行路径</strong></li>
</ul>
<ol>
<li>单线程</li>
<li>多线程</li>
</ol>
<h4 id="3-线程生命周期"><a href="#3-线程生命周期" class="headerlink" title="3. 线程生命周期"></a>3. 线程生命周期</h4><ul>
<li>新建 —&gt; 就绪 —&gt; 运行 —&gt; 死亡</li>
<li>​               (&lt;— 阻塞 &lt;—)</li>
</ul>
<h4 id="4-多线程的调用"><a href="#4-多线程的调用" class="headerlink" title="4. 多线程的调用"></a>4. 多线程的调用</h4><p><strong>方式1. 继承Thread类</strong></p>
<ul>
<li>定义一个MyThread 类，然后继承Thread类，重写run方法</li>
<li>start(): 启动线程，然后由JVM调用此线程的run方法</li>
</ul>
<h4 id="5-设置和获取线程名称"><a href="#5-设置和获取线程名称" class="headerlink" title="5. 设置和获取线程名称"></a>5. 设置和获取线程名称</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>  <span class="token comment">//设置</span>
<span class="token number">2.</span> <span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">//获取</span>
    
   	<span class="token comment">//获取main()方法所在线程的名称：  xxx.currentThread.getName();</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment">//返回对当前正在执行的线程对象的引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-Thread中获取和设置线程优先级的方法"><a href="#6-Thread中获取和设置线程优先级的方法" class="headerlink" title="6. Thread中获取和设置线程优先级的方法"></a>6. Thread中获取和设置线程优先级的方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//返回线程优先级</span>
<span class="token number">2.</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//更改线程优先级</span>
<span class="token number">3.</span> <span class="token comment">//默认是5，范围是1~10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="7-线程控制"><a href="#7-线程控制" class="headerlink" title="7. 线程控制"></a>7. 线程控制</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">static</span> <span class="token keyword">void</span> sleep <span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span>     <span class="token comment">//使当前执行的线程停留指定的毫秒数</span>
<span class="token number">2.</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>						 <span class="token comment">//等待这个线程的死亡</span>
<span class="token number">3.</span> <span class="token keyword">void</span> <span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> on<span class="token punctuation">)</span>          <span class="token comment">//将此线程标记为守护线程，当运行的线程是守护线程时，java虚拟机退出(也就是主线程结束，只剩下守护程序)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="8-多线程的实现方式"><a href="#8-多线程的实现方式" class="headerlink" title="8. 多线程的实现方式"></a>8. 多线程的实现方式</h4><p><strong>1. 两种实现方式</strong></p>
<ol>
<li>继承Thread类</li>
<li>实现Runnable接口</li>
</ol>
<p><strong>2. 实现Runnable接口</strong></p>
<ol>
<li>定义一个类实现Runnable接口</li>
<li>重写run()方法</li>
<li>创建类对象</li>
<li>以类对象为构造方法的参数       创建Thread类的对象</li>
<li>启动线程</li>
</ol>
<p><strong>3. 相比而言，实现Runnable接口的好处</strong></p>
<ol>
<li>避免了java单继承的局限性</li>
<li>适合多个相同程序的代码去处理 同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现了面向对象的设计思想</li>
</ol>
<h3 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2. 线程同步"></a>2. 线程同步</h3><h4 id="1-线程执行的随机性导致问题"><a href="#1-线程执行的随机性导致问题" class="headerlink" title="1. 线程执行的随机性导致问题"></a>1. 线程执行的随机性导致问题</h4><h4 id="2-同步代码块"><a href="#2-同步代码块" class="headerlink" title="2. 同步代码块"></a>2. 同步代码块</h4><ol>
<li><p>格式：</p>
<p>synchronized(任意对象) {</p>
<p>​    多条语句操作共享数据的代码</p>
<p>}</p>
</li>
<li><p>synchronized(任意对象) : 就相当于给代码加上锁了，任意对象可以看成一把锁</p>
</li>
<li><p>同步的好处和弊端：</p>
<ul>
<li>好处：解决了多线程的数据安全问题</li>
<li>坏处：当线程很多时，每个线程都会区判断同步上的锁，这是很耗资源的，无形中会降低程序的运行效率</li>
</ul>
</li>
</ol>
<h4 id="3-同步方法"><a href="#3-同步方法" class="headerlink" title="3. 同步方法"></a>3. 同步方法</h4><ul>
<li>就是把synchronized关键字加到方法上</li>
</ul>
<ol>
<li>格式：<ul>
<li>修饰符 synchronized 返回值类型 方法名(方法参数) { }</li>
</ul>
</li>
<li>同步方法的锁对象：this<ul>
<li>同步静态方法的锁对象：类名.class</li>
<li>格式：<ul>
<li>修饰符 static synchronized 返回值类型 方法名(方法参数) { }</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="4-线程安全的类"><a href="#4-线程安全的类" class="headerlink" title="4. 线程安全的类"></a>4. 线程安全的类</h4><p><strong>1. StringBuilder:</strong></p>
<ul>
<li>线程安全，可变的字符序列</li>
</ul>
<p><strong>2. Vector:</strong></p>
<ul>
<li>该类实现了List接口，使其成为Java Collections Framework的成员</li>
<li>与新的集合实现不同，Vector被同步。如果不需要线程安全，建议使用ArrayList代替Vector</li>
</ul>
<p><strong>3. Hashtable:</strong></p>
<ul>
<li>该类实现了哈希表。任何非null对象都可以用作键或者值</li>
<li>该表实现了Map接口，使其成为Java Collections Framework的成员</li>
<li>与新的集合实现不同，Vector被同步。如果不需要线程安全，建议使用HashMap代替Hashtable</li>
</ul>
<p><strong>4. </strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span>synchronizedList  <span class="token comment">//返回由指定列表变成的线程安全列表</span>
	例如：<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="5-Lock锁"><a href="#5-Lock锁" class="headerlink" title="5. Lock锁"></a>5. Lock锁</h4><ol>
<li><p>Lock提供比 synchronized() 更广泛的锁定操作</p>
<ol>
<li>void lock()   //上锁</li>
<li>void unlock()   //释放锁</li>
</ol>
</li>
<li><p>Lock锁是接口 不能直接实例化，采用实现类ReentrantLock来实例化 (多态）</p>
<ul>
<li>构造方法 ReentrantLock()</li>
<li>例子：</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>有异常可以用 try () { } finally () { } ，来保证unlock( ) 开锁一定执行</p>
</li>
</ol>
<h3 id="3-生产者与消费者"><a href="#3-生产者与消费者" class="headerlink" title="3. 生产者与消费者"></a>3. 生产者与消费者</h3><ol>
<li>十分经典的多线程写作模式<ul>
<li>一类是消费者用于消费数据</li>
<li>一类是生产者用于生产数据</li>
</ul>
</li>
<li>生产者 —&gt; 共享数据区域 &lt;— 消费者</li>
<li></li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">//导致当前线程等待，直到另一个线程调用该对象的notify()方法或者notifyall()方法</span>
<span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//唤醒正在等待对象监视器的单个进程</span>
<span class="token keyword">void</span> <span class="token function">notifyall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">//唤醒正在等待对象监视器的所有进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>方法引用</title>
    <url>/2023/11/24/javase_%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<p><div align='center'>
    <span style="font-size:45px;color:pink">方法引用</span>
</div></p>
<h4 id="1-方法引用符"><a href="#1-方法引用符" class="headerlink" title="1. 方法引用符"></a>1. 方法引用符</h4><ul>
<li>可推导就是可省略</li>
</ul>
<ol>
<li><p>::为引用运算符，他所在的表达式被成为方法引用</p>
</li>
<li><p>Lambda表达式：usePrintable(s —&gt; System.out.println(s));</p>
<p>方法引用: usePrintable(System.out::println);</p>
</li>
</ol>
<h4 id="2-Lambda表达式的方法引用"><a href="#2-Lambda表达式的方法引用" class="headerlink" title="2. Lambda表达式的方法引用"></a>2. Lambda表达式的方法引用</h4><ol>
<li><p>引用类方法       (其实就是引用类的静态方法)</p>
<ul>
<li><p>格式：类名::静态方法</p>
</li>
<li><p>范例：Integer::parseInt</p>
<p>​          Integer类方法：public static int parseInt(String s)  //String 转为 Int</p>
</li>
</ul>
</li>
<li><p>引用对象的实例方法      (其实就是引用类中的成员方法)</p>
<ul>
<li>格式：对象::成员方法</li>
<li>范例：”hello” :: toUpperCase<ul>
<li>String类中的方法： public String toUpperCase()   //所有字符转为大写</li>
</ul>
</li>
</ul>
</li>
<li><p>引用类的实例方法       (其实就是引用类中的成员方法)</p>
<ul>
<li>格式：类型::成员方法 </li>
<li>范例：String :: substring<ul>
<li>String类中的方法：public String substring (int beginIndex, int endIndex)  //截取字符串，返回子串</li>
</ul>
</li>
</ul>
</li>
<li><p>引用构造器                (其实就是引用构造方法)</p>
<ul>
<li>格式：类名::new</li>
<li>范例：Student::new</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>接口组成更新</title>
    <url>/2023/11/24/javase_%E6%8E%A5%E5%8F%A3%E7%BB%84%E6%88%90%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px;color:pink">接口组成更新</span>
</div>

<h4 id="1-接口的组成更新概述"><a href="#1-接口的组成更新概述" class="headerlink" title="1. 接口的组成更新概述"></a>1. 接口的组成更新概述</h4><ol>
<li>接口的组成：<ol>
<li>常量(默认)：       public static final</li>
<li>抽象方法(默认)：public Abstract</li>
</ol>
</li>
</ol>
<h4 id="2-接口中的默认方法"><a href="#2-接口中的默认方法" class="headerlink" title="2. 接口中的默认方法"></a>2. 接口中的默认方法</h4><ul>
<li>格式：(public) default 返回值类型 方法名(参数列表) {  }</li>
<li>范例：(public) default void show3( ) { }</li>
<li>注意事项：<ol>
<li>可以重写可以不重写</li>
<li>public 可以省略</li>
</ol>
</li>
</ul>
<h4 id="3-接口中的静态方法"><a href="#3-接口中的静态方法" class="headerlink" title="3. 接口中的静态方法"></a>3. 接口中的静态方法</h4><ul>
<li>格式：(public) static 返回值类型 方法名(参数列表) {  }</li>
<li>范例：(public) static void show ( ) {  }</li>
<li>注意事项：<ol>
<li>静态方法只能通过接口名调用，不能通过实现类或者对象名调用</li>
<li>public 可以省略</li>
</ol>
</li>
</ul>
<h4 id="4-接口中的私有方法"><a href="#4-接口中的私有方法" class="headerlink" title="4. 接口中的私有方法"></a>4. 接口中的私有方法</h4><ul>
<li>格式1：private 返回值类型 方法名(参数列表) {  }</li>
<li><p>范例1：private void show() {  }</p>
</li>
<li><p>格式2：private static 返回值类型 方法名(参数列表) {  }    (私有静态方法)</p>
</li>
<li><p>范例2：private static void show() {  }</p>
</li>
<li><p>注意事项：</p>
<ol>
<li>默认方法可以调用静态方法和非静态方法</li>
<li>静态方法只能调用静态方法</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式接口</title>
    <url>/2023/11/24/javase_%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<div align='center'>
    <span style="font-size:45px;color:pink">函数式接口</span>
</div>

<h4 id="1-函数式接口概述：-有且仅有一个抽象方法的接口"><a href="#1-函数式接口概述：-有且仅有一个抽象方法的接口" class="headerlink" title="1. 函数式接口概述：    (有且仅有一个抽象方法的接口)"></a>1. 函数式接口概述：    (有且仅有一个抽象方法的接口)</h4><ul>
<li>java的函数式编程体现的就是Lambda表达式</li>
<li>所有函数式接口就是可以适用于Lambda使用的接口</li>
<li>只有确保接口中有且仅有一个抽象方法，java中的Lambda才能顺利地进行推导</li>
</ul>
<h4 id="2-常用的函数式接口"><a href="#2-常用的函数式接口" class="headerlink" title="2. 常用的函数式接口"></a>2. 常用的函数式接口</h4><ol>
<li>Supplier接口</li>
<li>Consumer接口</li>
<li>Pr  edicate接口</li>
<li>Function接口</li>
</ol>
<h4 id="3-Supplier接口"><a href="#3-Supplier接口" class="headerlink" title="3. Supplier接口"></a>3. Supplier接口</h4><ul>
<li>Supplier &lt; T &gt; 包含一个无参构造方法</li>
</ul>
<ol>
<li>T get() ：获得结果</li>
<li>该方法不需要参数，它会按照某种逻辑(由Lambda表达式实现)返回一个数据</li>
</ol>
<ul>
<li><p>Supplier&lt; T &gt; 接口也被成为生产型接口，指定接口的泛型是什么类，那么接口中的get()方法就生产什么类型的数据供我们使用</p>
</li>
<li><p>例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="4-Consumer接口"><a href="#4-Consumer接口" class="headerlink" title="4. Consumer接口"></a>4. Consumer接口</h4><ul>
<li>Consumer&lt; T &gt; 包含两个方法</li>
<li>void accepr(T t)：对给定的参数执行此操作</li>
<li>default Consumer&lt; T &gt; andThen(Consumer after)：返回一个组合的Consumer，依次执行此操作，然后执行after操作</li>
<li>Consumer&lt; T &gt; 接口也被称为消费型接口，它消费的数据由泛型指定。</li>
</ul>
<h4 id="5-Predicate接口"><a href="#5-Predicate接口" class="headerlink" title="5. Predicate接口"></a>5. Predicate接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> 常用的四个方法
	<span class="token number">1.</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> 	对给定的参数进行判断<span class="token punctuation">(</span>判断逻辑由<span class="token class-name">Lambda</span>表达式实现<span class="token punctuation">)</span>，返回一个布尔值
	<span class="token number">2.</span> <span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  		对应逻辑非
	<span class="token number">3.</span> <span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span> other<span class="token punctuation">)</span><span class="token operator">:</span>	对应逻辑与
	<span class="token number">4.</span> <span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span> other<span class="token punctuation">)</span><span class="token operator">:</span>    对应逻辑或
<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> 接口通常用于判断参数是否满足指定的条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-Function接口"><a href="#6-Function接口" class="headerlink" title="6. Function接口"></a>6. Function接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">></span></span> 常用的两种方法
	<span class="token number">1.</span> <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token operator">:</span> 将此函数应用于给定的参数
	<span class="token number">2.</span> <span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">Function</span> <span class="token function">andThen</span><span class="token punctuation">(</span><span class="token class-name">Function</span> after<span class="token punctuation">)</span>：首先将该函数应用于输入，然后将after函数应用于结果
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">></span></span> 接口通常用于对参数进行处理，转换<span class="token punctuation">(</span>处理逻辑与<span class="token class-name">Lambda</span>表达式实现<span class="token punctuation">)</span><span class="token punctuation">,</span>然后返回一个新的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
</search>
